using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Rawr
{
    /*  Here are the values data-mined from build 18594 and imported into SimulationCraft:
     * 
     * https://code.google.com/p/simulationcraft/source/browse/engine/dbc/sc_scale_data.inc?name=wod

        If it has 100 entries then it was updated, otherwise it still has old values.
     
        Base Chance to Melee Crit%: 2.9219999909401%
        Base Chance to Spell Crit%: 2.2010000422597%

        Spell Scaling Multiplier: 1004.489990234375000 (level 80 value is 900.120300292968750. i.e. Level 85 base damage of abilities is 1004.49/900.12 or *1.12 more than at level 80 and so is the damage range.)
        Agi to +Melee Crit%: 0.0030780898669%
        Int to +Spell Crit%: 0.0015410500055%
        Int/Spirit regen coefficient: 0.003345000091940
     */
    public static class BaseCombatRating
    {
        #region Combat ratings for levels 1 - 100, wow build 18594
        #region Dodge Rating Multiplier
        private static readonly List<float> _dodgeRatingMultiplier = new List<float>()
        {
               0.796153187751770f,    0.796153068542480f,    0.796153068542480f,    0.796153068542480f,    0.796152949333191f,
               0.796153128147125f,    0.796153068542480f,    0.796153008937836f,    0.796153008937836f,    0.796153128147125f,
               1.194230556488037f,    1.592308163642883f,    1.990383744239807f,    2.388461112976074f,    2.786539077758789f,
               3.184616804122925f,    3.582691907882690f,    3.980769872665405f,    4.378847599029541f,    4.776922702789307f,
               5.175000190734863f,    5.573077678680420f,    5.971153259277344f,    6.369230747222900f,    6.767308712005615f,
               7.165383338928223f,    7.563461780548096f,    7.961538791656494f,    8.359617233276367f,    8.757692337036133f,
               9.155768394470215f,    9.553846359252930f,    9.951925277709961f,   10.350001335144043f,   10.748077392578125f,
              11.146153450012207f,   11.544231414794922f,   11.942307472229004f,   12.340383529663086f,   12.738462448120117f,
              13.136537551879883f,   13.534616470336914f,   13.932692527770996f,   14.330768585205078f,   14.728846549987793f,
              15.126925468444824f,   15.524999618530273f,   15.923077583312988f,   16.321155548095703f,   16.719230651855469f,
              17.117309570312500f,   17.515386581420898f,   17.913461685180664f,   18.311538696289062f,   18.709617614746094f,
              19.107692718505859f,   19.505769729614258f,   19.903848648071289f,   20.301923751831055f,   20.700000762939453f,
              20.924497604370117f,   21.198993682861328f,   21.473491668701172f,   21.747989654541016f,   22.022485733032227f,
              22.296983718872070f,   22.571481704711914f,   22.845977783203125f,   23.120475769042969f,   23.394973754882812f,
              23.669469833374023f,   23.943967819213867f,   24.218465805053711f,   24.492961883544922f,   24.767459869384766f,
              25.041955947875977f,   25.316453933715820f,   25.590951919555664f,   25.865447998046875f,   26.139945983886719f,
              27.206882476806641f,   28.273818969726562f,   28.807287216186523f,   28.807287216186523f,   29.340755462646484f,
              30.407691955566406f,   31.474628448486328f,   32.541564941406250f,   33.608501434326172f,   34.000000000000000f,
              40.000000000000000f,   47.000000000000000f,   56.000000000000000f,   65.000000000000000f,   75.000000000000000f,
              89.000000000000000f,  103.000000000000000f,  121.000000000000000f,  140.000000000000000f,  162.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required dodge rating for 1% dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DodgeRatingMultiplier(int Level)
        {
            return _dodgeRatingMultiplier[Level - 1];
        }
        #endregion

        #region Parry Rating Multiplier
        private static readonly List<float> _parryRatingMultiplier = new List<float>()
        {
               0.796153187751770f,    0.796153068542480f,    0.796153068542480f,    0.796153068542480f,    0.796152949333191f,
               0.796153128147125f,    0.796153068542480f,    0.796153008937836f,    0.796153008937836f,    0.796153128147125f,
               1.194230556488037f,    1.592308163642883f,    1.990383744239807f,    2.388461112976074f,    2.786539077758789f,
               3.184616804122925f,    3.582691907882690f,    3.980769872665405f,    4.378847599029541f,    4.776922702789307f,
               5.175000190734863f,    5.573077678680420f,    5.971153259277344f,    6.369230747222900f,    6.767308712005615f,
               7.165383338928223f,    7.563461780548096f,    7.961538791656494f,    8.359617233276367f,    8.757692337036133f,
               9.155768394470215f,    9.553846359252930f,    9.951925277709961f,   10.350001335144043f,   10.748077392578125f,
              11.146153450012207f,   11.544231414794922f,   11.942307472229004f,   12.340383529663086f,   12.738462448120117f,
              13.136537551879883f,   13.534616470336914f,   13.932692527770996f,   14.330768585205078f,   14.728846549987793f,
              15.126925468444824f,   15.524999618530273f,   15.923077583312988f,   16.321155548095703f,   16.719230651855469f,
              17.117309570312500f,   17.515386581420898f,   17.913461685180664f,   18.311538696289062f,   18.709617614746094f,
              19.107692718505859f,   19.505769729614258f,   19.903848648071289f,   20.301923751831055f,   20.700000762939453f,
              20.924497604370117f,   21.198993682861328f,   21.473491668701172f,   21.747989654541016f,   22.022485733032227f,
              22.296983718872070f,   22.571481704711914f,   22.845977783203125f,   23.120475769042969f,   23.394973754882812f,
              23.669469833374023f,   23.943967819213867f,   24.218465805053711f,   24.492961883544922f,   24.767459869384766f,
              25.041955947875977f,   25.316453933715820f,   25.590951919555664f,   25.865447998046875f,   26.139945983886719f,
              27.206882476806641f,   28.273818969726562f,   28.807287216186523f,   28.807287216186523f,   29.340755462646484f,
              30.407691955566406f,   31.474628448486328f,   32.541564941406250f,   33.608501434326172f,   34.000000000000000f,
              40.000000000000000f,   47.000000000000000f,   56.000000000000000f,   65.000000000000000f,   75.000000000000000f,
              89.000000000000000f,  103.000000000000000f,  121.000000000000000f,  140.000000000000000f,  162.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required parry rating for 1% parry
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ParryRatingMultiplier(int Level)
        {
            return _parryRatingMultiplier[Level - 1];
        }
        #endregion

        #region Block Rating Multiplier
        private static readonly List<float> _blockRatingMultiplier = new List<float>()
        {
               0.265384346246719f,    0.265384316444397f,    0.265384316444397f,    0.265384346246719f,    0.265384316444397f,
               0.265384346246719f,    0.265384376049042f,    0.265384346246719f,    0.265384376049042f,    0.265384376049042f,
               0.398076862096786f,    0.530769407749176f,    0.663461208343506f,    0.796153724193573f,    0.928846478462219f,
               1.061538696289062f,    1.194230675697327f,    1.326923012733459f,    1.459615826606750f,    1.592307567596436f,
               1.724999904632568f,    1.857692241668701f,    1.990384459495544f,    2.123076915740967f,    2.255769252777100f,
               2.388461112976074f,    2.521154165267944f,    2.653846025466919f,    2.786538839340210f,    2.919230461120605f,
               3.051922798156738f,    3.184615373611450f,    3.317308425903320f,    3.450000047683716f,    3.582691907882690f,
               3.715384006500244f,    3.848077058792114f,    3.980768918991089f,    4.113461017608643f,    4.246153831481934f,
               4.378846168518066f,    4.511538982391357f,    4.644230842590332f,    4.776923179626465f,    4.909615993499756f,
               5.042307853698730f,    5.175000190734863f,    5.307693004608154f,    5.440383911132812f,    5.573077201843262f,
               5.705769062042236f,    5.838461875915527f,    5.971154212951660f,    6.103846073150635f,    6.236537933349609f,
               6.369231224060059f,    6.501923084259033f,    6.634614944458008f,    6.767308235168457f,    6.900001049041748f,
               6.974832534790039f,    7.066331386566162f,    7.157830715179443f,    7.249329566955566f,    7.340828895568848f,
               7.432327747344971f,    7.523827075958252f,    7.615325927734375f,    7.706825256347656f,    7.798324108123779f,
               7.889823436737061f,    7.981322765350342f,    8.072821617126465f,    8.164320945739746f,    8.255820274353027f,
               8.347318649291992f,    8.438817977905273f,    8.530317306518555f,    8.621816635131836f,    8.713315010070801f,
               9.068961143493652f,    9.424606323242188f,    9.602429389953613f,    9.602429389953613f,    9.780251502990723f,
              10.135897636413574f,   10.491542816162109f,   10.847188949584961f,   11.202834129333496f,   11.000000000000000f,
              13.000000000000000f,   16.000000000000000f,   19.000000000000000f,   22.000000000000000f,   25.000000000000000f,
              30.000000000000000f,   34.000000000000000f,   40.000000000000000f,   47.000000000000000f,   54.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required block rating for 1% block
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float BlockRatingMultiplier(int Level)
        {
            return _blockRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Hit Rating Multiplier
        private static readonly List<float> _meleeHitRatingMultiplier = new List<float>()
        {
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
               1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
               2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
               2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
               3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
               4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
               5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
               5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
               6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
               7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
               8.038789749145508f,    8.144246101379395f,    8.249703407287598f,    8.355159759521484f,    8.460616111755371f,
               8.566072463989258f,    8.671529769897461f,    8.776986122131348f,    8.882442474365234f,    8.987898826599121f,
               9.093356132507324f,    9.198812484741211f,    9.304268836975098f,    9.409725189208984f,    9.515182495117188f,
               9.620638847351074f,    9.726095199584961f,    9.831551551818848f,    9.937008857727051f,   10.042465209960938f,
              10.452362060546875f,   10.862257957458496f,   11.067206382751465f,   11.067206382751465f,   11.272154808044434f,
              11.682051658630371f,   12.091947555541992f,   12.501844406127930f,   12.911741256713867f,   13.000000000000000f,
              15.000000000000000f,   18.000000000000000f,   22.000000000000000f,   25.000000000000000f,   29.000000000000000f,
              34.000000000000000f,   40.000000000000000f,   46.000000000000000f,   54.000000000000000f,   62.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required melee hit rating for 1% Melee Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeHitRatingMultiplier(int Level)
        {
            return _meleeHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged Hit Rating Multipliers
        private static readonly List<float> _rangedHitRatingMultiplier = new List<float>()
        {
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
               1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
               2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
               2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
               3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
               4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
               5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
               5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
               6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
               7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
               8.038789749145508f,    8.144246101379395f,    8.249703407287598f,    8.355159759521484f,    8.460616111755371f,
               8.566072463989258f,    8.671529769897461f,    8.776986122131348f,    8.882442474365234f,    8.987898826599121f,
               9.093356132507324f,    9.198812484741211f,    9.304268836975098f,    9.409725189208984f,    9.515182495117188f,
               9.620638847351074f,    9.726095199584961f,    9.831551551818848f,    9.937008857727051f,   10.042465209960938f,
              10.452362060546875f,   10.862257957458496f,   11.067206382751465f,   11.067206382751465f,   11.272154808044434f,
              11.682051658630371f,   12.091947555541992f,   12.501844406127930f,   12.911741256713867f,   13.000000000000000f,
              15.000000000000000f,   18.000000000000000f,   22.000000000000000f,   25.000000000000000f,   29.000000000000000f,
              34.000000000000000f,   40.000000000000000f,   46.000000000000000f,   54.000000000000000f,   62.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required range hit rating for 1% Range Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangedHitRatingMultiplier(int Level)
        {
            return _rangedHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Hit Rating Multiplier
        private static readonly List<float> _spellHitRatingMultiplier = new List<float>()
        {
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
               1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
               2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
               2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
               3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
               4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
               5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
               5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
               6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
               7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
               8.038789749145508f,    8.144246101379395f,    8.249703407287598f,    8.355159759521484f,    8.460616111755371f,
               8.566072463989258f,    8.671529769897461f,    8.776986122131348f,    8.882442474365234f,    8.987898826599121f,
               9.093356132507324f,    9.198812484741211f,    9.304268836975098f,    9.409725189208984f,    9.515182495117188f,
               9.620638847351074f,    9.726095199584961f,    9.831551551818848f,    9.937008857727051f,   10.042465209960938f,
              10.452362060546875f,   10.862257957458496f,   11.067206382751465f,   11.067206382751465f,   11.272154808044434f,
              11.682051658630371f,   12.091947555541992f,   12.501844406127930f,   12.911741256713867f,   13.000000000000000f,
              15.000000000000000f,   18.000000000000000f,   22.000000000000000f,   25.000000000000000f,   29.000000000000000f,
              34.000000000000000f,   40.000000000000000f,   46.000000000000000f,   54.000000000000000f,   62.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Spell Hit rating for 1% Spell Hit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellHitRatingMultiplier(int Level)
        {
            return _spellHitRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Crit Rating Multiplier
        private static readonly List<float> _meleeCritRatingMultiplier = new List<float>()
        {
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
               2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
               3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
               4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
               6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
               7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
               8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
              10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
              11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
              12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
              14.186100006103516f,   14.372200012207031f,   14.558300018310547f,   14.744399070739746f,   14.930499076843262f,
              15.116599082946777f,   15.302699089050293f,   15.488799095153809f,   15.674899101257324f,   15.860999107360840f,
              16.047098159790039f,   16.233198165893555f,   16.419298171997070f,   16.605398178100586f,   16.791498184204102f,
              16.977598190307617f,   17.163698196411133f,   17.349798202514648f,   17.535898208618164f,   17.721998214721680f,
              18.445344924926758f,   19.168691635131836f,   19.530364990234375f,   19.530364990234375f,   19.892038345336914f,
              20.615385055541992f,   21.338731765747070f,   22.062078475952148f,   22.785425186157227f,   23.000000000000000f,
              27.000000000000000f,   32.000000000000000f,   38.000000000000000f,   44.000000000000000f,   51.000000000000000f,
              60.000000000000000f,   70.000000000000000f,   82.000000000000000f,   95.000000000000000f,  110.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Melee Crit rating for 1% Melee Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeCritRatingMultiplier(int Level)
        {
            return _meleeCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged crit rating multipliers
        private static readonly List<float> _rangeCritRatingMultiplier = new List<float>()
        {
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
               2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
               3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
               4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
               6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
               7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
               8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
              10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
              11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
              12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
              14.186100006103516f,   14.372200012207031f,   14.558300018310547f,   14.744399070739746f,   14.930499076843262f,
              15.116599082946777f,   15.302699089050293f,   15.488799095153809f,   15.674899101257324f,   15.860999107360840f,
              16.047098159790039f,   16.233198165893555f,   16.419298171997070f,   16.605398178100586f,   16.791498184204102f,
              16.977598190307617f,   17.163698196411133f,   17.349798202514648f,   17.535898208618164f,   17.721998214721680f,
              18.445344924926758f,   19.168691635131836f,   19.530364990234375f,   19.530364990234375f,   19.892038345336914f,
              20.615385055541992f,   21.338731765747070f,   22.062078475952148f,   22.785425186157227f,   23.000000000000000f,
              27.000000000000000f,   32.000000000000000f,   38.000000000000000f,   44.000000000000000f,   51.000000000000000f,
              60.000000000000000f,   70.000000000000000f,   82.000000000000000f,   95.000000000000000f,  110.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Range Crit rating for 1% Range Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangeCritRatingMultiplier(int Level)
        {
            return _rangeCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Crit Rating Multiplier
        private static readonly List<float> _spellCritRatingMultiplier = new List<float>()
        {
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
               2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
               3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
               4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
               6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
               7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
               8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
              10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
              11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
              12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
              14.186100006103516f,   14.372200012207031f,   14.558300018310547f,   14.744399070739746f,   14.930499076843262f,
              15.116599082946777f,   15.302699089050293f,   15.488799095153809f,   15.674899101257324f,   15.860999107360840f,
              16.047098159790039f,   16.233198165893555f,   16.419298171997070f,   16.605398178100586f,   16.791498184204102f,
              16.977598190307617f,   17.163698196411133f,   17.349798202514648f,   17.535898208618164f,   17.721998214721680f,
              18.445344924926758f,   19.168691635131836f,   19.530364990234375f,   19.530364990234375f,   19.892038345336914f,
              20.615385055541992f,   21.338731765747070f,   22.062078475952148f,   22.785425186157227f,   23.000000000000000f,
              27.000000000000000f,   32.000000000000000f,   38.000000000000000f,   44.000000000000000f,   51.000000000000000f,
              60.000000000000000f,   70.000000000000000f,   82.000000000000000f,   95.000000000000000f,  110.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Spell Crit rating for 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellCritRatingMultiplier(int Level)
        {
            return _spellCritRatingMultiplier[Level - 1];
        }
        #endregion

        #region Melee Haste Rating Multiplier
        private static readonly List<float> _meleeHasteRatingMultiplier = new List<float>()
        {
               0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
               0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
               0.721153736114502f,    0.961538732051849f,    1.201922535896301f,    1.442307472229004f,    1.682692527770996f,
               1.923077464103699f,    2.163461208343506f,    2.403846263885498f,    2.644231319427490f,    2.884614944458008f,
               3.125000000000000f,    3.365385055541992f,    3.605768680572510f,    3.846153736114502f,    4.086538791656494f,
               4.326922416687012f,    4.567307472229004f,    4.807692527770996f,    5.048077583312988f,    5.288461208343506f,
               5.528846263885498f,    5.769231319427490f,    6.009616374969482f,    6.250000000000000f,    6.490385055541992f,
               6.730768680572510f,    6.971153736114502f,    7.211538791656494f,    7.451922416687012f,    7.692307472229004f,
               7.932692527770996f,    8.173077583312988f,    8.413461685180664f,    8.653845787048340f,    8.894230842590332f,
               9.134615898132324f,    9.375000000000000f,    9.615384101867676f,    9.855769157409668f,   10.096154212951660f,
              10.336538314819336f,   10.576922416687012f,   10.817307472229004f,   11.057692527770996f,   11.298077583312988f,
              11.538461685180664f,   11.778845787048340f,   12.019230842590332f,   12.259615898132324f,   12.500000000000000f,
              12.560608863830566f,   12.725384712219238f,   12.890162467956543f,   13.054937362670898f,   13.219713211059570f,
              13.384489059448242f,   13.549264907836914f,   13.714040756225586f,   13.878816604614258f,   14.043592453002930f,
              14.208368301391602f,   14.373144149780273f,   14.537919998168945f,   14.702695846557617f,   14.867471694946289f,
              15.032247543334961f,   15.197024345397949f,   15.361800193786621f,   15.526576042175293f,   15.691351890563965f,
              16.331815719604492f,   16.972278594970703f,   17.292510986328125f,   17.292510986328125f,   17.612741470336914f,
              18.253204345703125f,   18.893669128417969f,   19.534132003784180f,   20.174594879150391f,   20.000000000000000f,
              25.000000000000000f,   29.000000000000000f,   35.000000000000000f,   40.000000000000000f,   46.000000000000000f,
              55.000000000000000f,   64.000000000000000f,   75.000000000000000f,   86.000000000000000f,  100.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Melee Haste rating for 1% Melee Haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MeleeHasteRatingMultiplier(int Level)
        {
            return _meleeHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Ranged Haste Rating Multiplier
        private static readonly List<float> _rangedHasteRatingMultiplier = new List<float>()
        {
               0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
               0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
               0.721153736114502f,    0.961538732051849f,    1.201922535896301f,    1.442307472229004f,    1.682692527770996f,
               1.923077464103699f,    2.163461208343506f,    2.403846263885498f,    2.644231319427490f,    2.884614944458008f,
               3.125000000000000f,    3.365385055541992f,    3.605768680572510f,    3.846153736114502f,    4.086538791656494f,
               4.326922416687012f,    4.567307472229004f,    4.807692527770996f,    5.048077583312988f,    5.288461208343506f,
               5.528846263885498f,    5.769231319427490f,    6.009616374969482f,    6.250000000000000f,    6.490385055541992f,
               6.730768680572510f,    6.971153736114502f,    7.211538791656494f,    7.451922416687012f,    7.692307472229004f,
               7.932692527770996f,    8.173077583312988f,    8.413461685180664f,    8.653845787048340f,    8.894230842590332f,
               9.134615898132324f,    9.375000000000000f,    9.615384101867676f,    9.855769157409668f,   10.096154212951660f,
              10.336538314819336f,   10.576922416687012f,   10.817307472229004f,   11.057692527770996f,   11.298077583312988f,
              11.538461685180664f,   11.778845787048340f,   12.019230842590332f,   12.259615898132324f,   12.500000000000000f,
              12.560608863830566f,   12.725384712219238f,   12.890162467956543f,   13.054937362670898f,   13.219713211059570f,
              13.384489059448242f,   13.549264907836914f,   13.714040756225586f,   13.878816604614258f,   14.043592453002930f,
              14.208368301391602f,   14.373144149780273f,   14.537919998168945f,   14.702695846557617f,   14.867471694946289f,
              15.032247543334961f,   15.197024345397949f,   15.361800193786621f,   15.526576042175293f,   15.691351890563965f,
              16.331815719604492f,   16.972278594970703f,   17.292510986328125f,   17.292510986328125f,   17.612741470336914f,
              18.253204345703125f,   18.893669128417969f,   19.534132003784180f,   20.174594879150391f,   20.000000000000000f,
              25.000000000000000f,   29.000000000000000f,   35.000000000000000f,   40.000000000000000f,   46.000000000000000f,
              55.000000000000000f,   64.000000000000000f,   75.000000000000000f,   86.000000000000000f,  100.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Range Haste rating for 1% Range haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RangedHasteRatingMultiplier(int Level)
        {
            return _rangedHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Spell Haste Rating Multiplier
        private static readonly List<float> _spellHasteRatingMultiplier = new List<float>()
        {
           0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
           0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,    0.480768740177155f,
           0.721153736114502f,    0.961538732051849f,    1.201922535896301f,    1.442307472229004f,    1.682692527770996f,
           1.923077464103699f,    2.163461208343506f,    2.403846263885498f,    2.644231319427490f,    2.884614944458008f,
           3.125000000000000f,    3.365385055541992f,    3.605768680572510f,    3.846153736114502f,    4.086538791656494f,
           4.326922416687012f,    4.567307472229004f,    4.807692527770996f,    5.048077583312988f,    5.288461208343506f,
           5.528846263885498f,    5.769231319427490f,    6.009616374969482f,    6.250000000000000f,    6.490385055541992f,
           6.730768680572510f,    6.971153736114502f,    7.211538791656494f,    7.451922416687012f,    7.692307472229004f,
           7.932692527770996f,    8.173077583312988f,    8.413461685180664f,    8.653845787048340f,    8.894230842590332f,
           9.134615898132324f,    9.375000000000000f,    9.615384101867676f,    9.855769157409668f,   10.096154212951660f,
          10.336538314819336f,   10.576922416687012f,   10.817307472229004f,   11.057692527770996f,   11.298077583312988f,
          11.538461685180664f,   11.778845787048340f,   12.019230842590332f,   12.259615898132324f,   12.500000000000000f,
          12.560608863830566f,   12.725384712219238f,   12.890162467956543f,   13.054937362670898f,   13.219713211059570f,
          13.384489059448242f,   13.549264907836914f,   13.714040756225586f,   13.878816604614258f,   14.043592453002930f,
          14.208368301391602f,   14.373144149780273f,   14.537919998168945f,   14.702695846557617f,   14.867471694946289f,
          15.032247543334961f,   15.197024345397949f,   15.361800193786621f,   15.526576042175293f,   15.691351890563965f,
          16.331815719604492f,   16.972278594970703f,   17.292510986328125f,   17.292510986328125f,   17.612741470336914f,
          18.253204345703125f,   18.893669128417969f,   19.534132003784180f,   20.174594879150391f,   20.000000000000000f,
          25.000000000000000f,   29.000000000000000f,   35.000000000000000f,   40.000000000000000f,   46.000000000000000f,
          55.000000000000000f,   64.000000000000000f,   75.000000000000000f,   86.000000000000000f,  100.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the Spell haste rating for 1% Spell Haste
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float SpellHasteRatingMultiplier(int Level)
        {
            return _spellHasteRatingMultiplier[Level - 1];
        }
        #endregion

        #region Expertise Rating Multiplier
        private static readonly List<float> _expertiseRatingMultiplier = new List<float>()
        {
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,    0.307691991329193f,
               0.461537986993790f,    0.615384995937347f,    0.769231021404266f,    0.923076987266541f,    1.076923012733459f,
               1.230769038200378f,    1.384614944458008f,    1.538462042808533f,    1.692307949066162f,    1.846153974533081f,
               2.000000000000000f,    2.153846025466919f,    2.307692050933838f,    2.461539030075073f,    2.615385055541992f,
               2.769231081008911f,    2.923077106475830f,    3.076922893524170f,    3.230768918991089f,    3.384614944458008f,
               3.538461923599243f,    3.692307949066162f,    3.846153974533081f,    4.000000000000000f,    4.153845787048340f,
               4.307692050933838f,    4.461537837982178f,    4.615385055541992f,    4.769230842590332f,    4.923077106475830f,
               5.076922893524170f,    5.230769157409668f,    5.384614944458008f,    5.538462162017822f,    5.692306995391846f,
               5.846154212951660f,    6.000000000000000f,    6.153845787048340f,    6.307693004608154f,    6.461537837982178f,
               6.615385055541992f,    6.769230842590332f,    6.923077106475830f,    7.076922893524170f,    7.230769157409668f,
               7.384614944458008f,    7.538462162017822f,    7.692306995391846f,    7.846154212951660f,    8.000000000000000f,
               8.038789749145508f,    8.144246101379395f,    8.249703407287598f,    8.355159759521484f,    8.460616111755371f,
               8.566072463989258f,    8.671529769897461f,    8.776986122131348f,    8.882442474365234f,    8.987898826599121f,
               9.093356132507324f,    9.198812484741211f,    9.304268836975098f,    9.409725189208984f,    9.515182495117188f,
               9.620638847351074f,    9.726095199584961f,    9.831551551818848f,    9.937008857727051f,   10.042465209960938f,
              10.452362060546875f,   10.862257957458496f,   11.067206382751465f,   11.067206382751465f,   11.272154808044434f,
              11.682051658630371f,   12.091947555541992f,   12.501844406127930f,   12.911741256713867f,   13.000000000000000f,
              15.000000000000000f,   18.000000000000000f,   22.000000000000000f,   25.000000000000000f,   29.000000000000000f,
              34.000000000000000f,   40.000000000000000f,   46.000000000000000f,   54.000000000000000f,   62.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Exertise rating for 1% expertise
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ExpertiseRatingMultiplier(int Level)
        {
            return _expertiseRatingMultiplier[Level - 1];
        }
        #endregion

        #region Mastery Rating Multiplier
        private static readonly List<float> _masteryRatingMultiplier = new List<float>
        {
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
               2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
               3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
               4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
               6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
               7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
               8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
              10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
              11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
              12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
              14.186100006103516f,   14.372200012207031f,   14.558300018310547f,   14.744399070739746f,   14.930499076843262f,
              15.116599082946777f,   15.302699089050293f,   15.488799095153809f,   15.674899101257324f,   15.860999107360840f,
              16.047098159790039f,   16.233198165893555f,   16.419298171997070f,   16.605398178100586f,   16.791498184204102f,
              16.977598190307617f,   17.163698196411133f,   17.349798202514648f,   17.535898208618164f,   17.721998214721680f,
              18.445344924926758f,   19.168691635131836f,   19.530364990234375f,   19.530364990234375f,   19.892038345336914f,
              20.615385055541992f,   21.338731765747070f,   22.062078475952148f,   22.785425186157227f,   23.000000000000000f,
              27.000000000000000f,   32.000000000000000f,   38.000000000000000f,   44.000000000000000f,   51.000000000000000f,
              60.000000000000000f,   70.000000000000000f,   82.000000000000000f,   95.000000000000000f,  110.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required mastery rating for 1 mastery
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MasteryRatingMultiplier(int Level)
        {
            return _masteryRatingMultiplier[Level - 1];
        }
        #endregion

        #region PvP Resilience
        private static readonly List<float> _pvpResilienceRatingMultiplier = new List<float>()
        {
               0.357366561889648f,    0.357366532087326f,    0.357366621494293f,    0.357366591691971f,    0.357366561889648f,
               0.357366621494293f,    0.357366591691971f,    0.357366561889648f,    0.357366532087326f,    0.357366591691971f,
               0.536050319671631f,    0.714734077453613f,    0.893416821956635f,    1.072100758552551f,    1.250784635543823f,
               1.429468393325806f,    1.608151316642761f,    1.786834836006165f,    1.965518832206726f,    2.144201278686523f,
               2.322885274887085f,    2.501568794250488f,    2.680251836776733f,    2.858935356140137f,    3.037619352340698f,
               3.216301679611206f,    3.394985675811768f,    3.573669672012329f,    3.752353429794312f,    3.931035995483398f,
               4.109719753265381f,    4.288403511047363f,    4.467087745666504f,    4.645770072937012f,    4.824453353881836f,
               5.003137111663818f,    5.181820392608643f,    5.360503673553467f,    5.539187908172607f,    5.717871189117432f,
               5.896554470062256f,    6.075237274169922f,    6.253921508789062f,    6.432604789733887f,    6.611288547515869f,
               6.789971828460693f,    6.968655586242676f,    7.147338867187500f,    7.326023101806641f,    7.504706859588623f,
               7.683389663696289f,    7.862073421478271f,    8.040756225585938f,    8.219439506530762f,    8.398122787475586f,
               8.576807022094727f,    8.755489349365234f,    8.934174537658691f,    9.112856864929199f,    9.291540145874023f,
               7.329484939575195f,    7.425636291503906f,    7.521788120269775f,    7.617939949035645f,    7.714091300964355f,
               7.810243129730225f,    7.906394481658936f,    8.002546310424805f,    8.098697662353516f,    8.194849014282227f,
               8.291001319885254f,    8.387152671813965f,    8.483304023742676f,    8.579455375671387f,    8.675607681274414f,
               8.771759033203125f,    8.867910385131836f,    8.964061737060547f,    9.060214042663574f,    9.156365394592285f,
               9.530094146728516f,    9.903823852539062f,   10.090688705444336f,   10.090688705444336f,   10.277552604675293f,
              10.651282310485840f,   11.025011062622070f,   11.398740768432617f,   11.772470474243164f,   12.000000000000000f,
              14.000000000000000f,   17.000000000000000f,   20.000000000000000f,   23.000000000000000f,   26.000000000000000f,
              31.000000000000000f,   36.000000000000000f,   42.000000000000000f,   49.000000000000000f,   57.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required PvP Resilience rating for 1% PvP Resilience
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PvPResilienceRatingRatingMultiplier(int Level)
        {
            return _pvpResilienceRatingMultiplier[Level - 1];
        }
        #endregion

        #region PvP Power
        private static readonly List<float> _pvpPowerRatingMultiplier = new List<float>()
        {
               0.237820714712143f,    0.237820714712143f,    0.237820714712143f,    0.237820714712143f,    0.237820714712143f,
               0.237820714712143f,    0.237820714712143f,    0.237820714712143f,    0.237820714712143f,    0.237820714712143f,
               0.356730639934540f,    0.475640982389450f,    0.594551324844360f,    0.713461697101593f,    0.832371652126312f,
               0.951281964778900f,    1.070192337036133f,    1.189102649688721f,    1.308012604713440f,    1.426922917366028f,
               1.545833349227905f,    1.664743661880493f,    1.783654093742371f,    1.902563929557800f,    2.021474361419678f,
               2.140384674072266f,    2.259294986724854f,    2.378205060958862f,    2.497115373611450f,    2.616025686264038f,
               2.734935522079468f,    2.853845834732056f,    2.972756385803223f,    3.091666698455811f,    3.210577011108398f,
               3.329487323760986f,    3.448397636413574f,    3.567307710647583f,    3.686218023300171f,    3.805127859115601f,
               3.924038410186768f,    4.042948722839355f,    4.161859035491943f,    4.280768871307373f,    4.399679183959961f,
               4.518589973449707f,    4.637499809265137f,    4.756410598754883f,    4.875320911407471f,    4.994231224060059f,
               5.113141059875488f,    5.232051849365234f,    5.350961685180664f,    5.469872474670410f,    5.588782310485840f,
               5.707693099975586f,    5.826602935791016f,    5.945513248443604f,    6.064423561096191f,    6.183333396911621f,
               6.265527248382568f,    6.347721576690674f,    6.429915428161621f,    6.512109756469727f,    6.594304084777832f,
               6.676497936248779f,    6.758692264556885f,    6.840886116027832f,    6.923080444335938f,    7.005274295806885f,
               7.087468624114990f,    7.169662475585938f,    7.251856803894043f,    7.334050655364990f,    7.416244983673096f,
               7.498438835144043f,    7.580633163452148f,    7.662827491760254f,    7.745021343231201f,    7.827215671539307f,
               8.146693229675293f,    8.466172218322754f,    8.625910758972168f,    8.625910758972168f,    8.785650253295898f,
               9.105128288269043f,    9.424606323242188f,    9.744084358215332f,   10.063562393188477f,   10.000000000000000f,
              12.000000000000000f,   14.000000000000000f,   17.000000000000000f,   19.000000000000000f,   23.000000000000000f,
              27.000000000000000f,   31.000000000000000f,   36.000000000000000f,   42.000000000000000f,   49.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required PvP Power rating for 1% PvP Power
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PvPPowerRatingRatingMultiplier(int Level)
        {
            return _pvpPowerRatingMultiplier[Level - 1];
        }
        #endregion

        #region Multistrike
        private static readonly List<float> _multistrikeRatingMultiplier = new List<float>()
        {
               0.323077201843262f,    0.323077201843262f,    0.323077201843262f,    0.323077201843262f,    0.323077201843262f,
               0.323077201843262f,    0.323077201843262f,    0.323077201843262f,    0.323077201843262f,    0.323077201843262f,
               0.484615206718445f,    0.646153807640076f,    0.807692408561707f,    0.969231009483337f,    1.130769014358521f,
               1.292307615280151f,    1.453846216201782f,    1.615384817123413f,    1.776922821998596f,    1.938461422920227f,
               2.099999904632568f,    2.261538505554199f,    2.423077106475830f,    2.584615230560303f,    2.746153831481934f,
               2.907692432403564f,    3.069231033325195f,    3.230768918991089f,    3.392307519912720f,    3.553846120834351f,
               3.715384244918823f,    3.876922845840454f,    4.038461208343506f,    4.199999809265137f,    4.361538410186768f,
               4.523077011108398f,    4.684615612030029f,    4.846153736114502f,    5.007692337036133f,    5.169230461120605f,
               5.330769062042236f,    5.492307662963867f,    5.653846263885498f,    5.815384387969971f,    5.976922988891602f,
               6.138462066650391f,    6.300000190734863f,    6.461539268493652f,    6.623077392578125f,    6.784615993499756f,
               6.946153640747070f,    7.107693195343018f,    7.269230842590332f,    7.430770397186279f,    7.592308044433594f,
               7.753847599029541f,    7.915384769439697f,    8.076923370361328f,    8.238462448120117f,    8.399999618530273f,
               8.511659622192383f,    8.623319625854492f,    8.734979629516602f,    8.846639633178711f,    8.958299636840820f,
               9.069959640502930f,    9.181619644165039f,    9.293279647827148f,    9.404939651489258f,    9.516599655151367f,
               9.628258705139160f,    9.739918708801270f,    9.851578712463379f,    9.963238716125488f,   10.074898719787598f,
              10.186558723449707f,   10.298218727111816f,   10.409878730773926f,   10.521538734436035f,   10.633198738098145f,
              11.067206382751465f,   11.501214981079102f,   11.718218803405762f,   11.718218803405762f,   11.935222625732422f,
              12.369231224060059f,   12.803238868713379f,   13.237247467041016f,   13.671255111694336f,   14.000000000000000f,
              16.000000000000000f,   20.000000000000000f,   22.000000000000000f,   26.000000000000000f,   30.000000000000000f,
              36.000000000000000f,   42.000000000000000f,   50.000000000000000f,   58.000000000000000f,   66.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Multistrike rating for 1% Multistrike
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MultistrikeRatingMultiplier(int Level)
        {
            return _multistrikeRatingMultiplier[Level - 1];
        }
        #endregion

        #region Readiness
        private static readonly List<float> _readinessRatingMultiplier = new List<float>()
        {
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,    0.538461983203888f,
               0.807691991329193f,    1.076923012733459f,    1.346153974533081f,    1.615385055541992f,    1.884614944458008f,
               2.153846025466919f,    2.423077106475830f,    2.692307949066162f,    2.961538076400757f,    3.230768918991089f,
               3.500000000000000f,    3.769231081008911f,    4.038462162017822f,    4.307692050933838f,    4.576922893524170f,
               4.846154212951660f,    5.115385055541992f,    5.384614944458008f,    5.653845787048340f,    5.923077106475830f,
               6.192306995391846f,    6.461537837982178f,    6.730769157409668f,    7.000000000000000f,    7.269230842590332f,
               7.538462162017822f,    7.807693004608154f,    8.076923370361328f,    8.346154212951660f,    8.615384101867676f,
               8.884614944458008f,    9.153845787048340f,    9.423076629638672f,    9.692307472229004f,    9.961538314819336f,
              10.230770111083984f,   10.500000000000000f,   10.769231796264648f,   11.038461685180664f,   11.307692527770996f,
              11.576923370361328f,   11.846155166625977f,   12.115385055541992f,   12.384616851806641f,   12.653846740722656f,
              12.923078536987305f,   13.192308425903320f,   13.461539268493652f,   13.730770111083984f,   14.000000000000000f,
              14.186100006103516f,   14.372200012207031f,   14.558300018310547f,   14.744399070739746f,   14.930499076843262f,
              15.116599082946777f,   15.302699089050293f,   15.488799095153809f,   15.674899101257324f,   15.860999107360840f,
              16.047098159790039f,   16.233198165893555f,   16.419298171997070f,   16.605398178100586f,   16.791498184204102f,
              16.977598190307617f,   17.163698196411133f,   17.349798202514648f,   17.535898208618164f,   17.721998214721680f,
              18.445344924926758f,   19.168691635131836f,   19.530364990234375f,   19.530364990234375f,   19.892038345336914f,
              20.615385055541992f,   21.338731765747070f,   22.062078475952148f,   22.785425186157227f,   23.000000000000000f,
              27.000000000000000f,   32.000000000000000f,   38.000000000000000f,   44.000000000000000f,   51.000000000000000f,
              60.000000000000000f,   70.000000000000000f,   82.000000000000000f,   95.000000000000000f,  110.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Readiness rating for 1% Readiness
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ReadinessRatingMultiplier(int Level)
        {
            return _readinessRatingMultiplier[Level - 1];
        }
        #endregion

        #region Damage Versatility
        private static readonly List<float> _damageVersatilityRatingMultiplier = new List<float>()
        {
               0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,
               0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,
               0.954545080661774f,    1.272727131843567f,    1.590909242630005f,    1.909091353416443f,    2.227272272109985f,
               2.545454263687134f,    2.863636493682861f,    3.181818485260010f,    3.499999523162842f,    3.818181514739990f,
               4.136363506317139f,    4.454545497894287f,    4.772727966308594f,    5.090908527374268f,    5.409090995788574f,
               5.727272987365723f,    6.045454978942871f,    6.363636016845703f,    6.681818008422852f,    7.000000000000000f,
               7.318181037902832f,    7.636363029479980f,    7.954545021057129f,    8.272727012634277f,    8.590909004211426f,
               8.909090995788574f,    9.227273941040039f,    9.545454025268555f,    9.863636970520020f,   10.181817054748535f,
              10.500000000000000f,   10.818181991577148f,   11.136363983154297f,   11.454545021057129f,   11.772727012634277f,
              12.090909957885742f,   12.409090995788574f,   12.727273941040039f,   13.045454978942871f,   13.363636970520020f,
              13.681818008422852f,   14.000000953674316f,   14.318181991577148f,   14.636365890502930f,   14.954545974731445f,
              15.272729873657227f,   15.590909004211426f,   15.909091949462891f,   16.227273941040039f,   16.545454025268555f,
              16.765390396118164f,   16.985326766967773f,   17.205263137817383f,   17.425199508666992f,   17.645135879516602f,
              17.865072250366211f,   18.085008621215820f,   18.304944992065430f,   18.524879455566406f,   18.744815826416016f,
              18.964752197265625f,   19.184688568115234f,   19.404624938964844f,   19.624561309814453f,   19.844497680664062f,
              20.064434051513672f,   20.284370422363281f,   20.504306793212891f,   20.724243164062500f,   20.944179534912109f,
              21.799043655395508f,   22.653907775878906f,   23.081338882446289f,   23.081338882446289f,   23.508771896362305f,
              24.363636016845703f,   25.218500137329102f,   26.073366165161133f,   26.928230285644531f,   27.000000000000000f,
              32.000000000000000f,   38.000000000000000f,   45.000000000000000f,   52.000000000000000f,   60.000000000000000f,
              71.000000000000000f,   83.000000000000000f,   97.000000000000000f,  112.000000000000000f,  130.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Damage Versatility rating for 1% Damage Versatility
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DamageVersatilityRatingMultiplier(int Level)
        {
            return _damageVersatilityRatingMultiplier[Level - 1];
        }
        #endregion

        #region Healing Versatility
        private static readonly List<float> _healingVersatilityRatingMultiplier = new List<float>()
        {
               0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,
               0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,    0.636364161968231f,
               0.954545080661774f,    1.272727131843567f,    1.590909242630005f,    1.909091353416443f,    2.227272272109985f,
               2.545454263687134f,    2.863636493682861f,    3.181818485260010f,    3.499999523162842f,    3.818181514739990f,
               4.136363506317139f,    4.454545497894287f,    4.772727966308594f,    5.090908527374268f,    5.409090995788574f,
               5.727272987365723f,    6.045454978942871f,    6.363636016845703f,    6.681818008422852f,    7.000000000000000f,
               7.318181037902832f,    7.636363029479980f,    7.954545021057129f,    8.272727012634277f,    8.590909004211426f,
               8.909090995788574f,    9.227273941040039f,    9.545454025268555f,    9.863636970520020f,   10.181817054748535f,
              10.500000000000000f,   10.818181991577148f,   11.136363983154297f,   11.454545021057129f,   11.772727012634277f,
              12.090909957885742f,   12.409090995788574f,   12.727273941040039f,   13.045454978942871f,   13.363636970520020f,
              13.681818008422852f,   14.000000953674316f,   14.318181991577148f,   14.636365890502930f,   14.954545974731445f,
              15.272729873657227f,   15.590909004211426f,   15.909091949462891f,   16.227273941040039f,   16.545454025268555f,
              16.765390396118164f,   16.985326766967773f,   17.205263137817383f,   17.425199508666992f,   17.645135879516602f,
              17.865072250366211f,   18.085008621215820f,   18.304944992065430f,   18.524879455566406f,   18.744815826416016f,
              18.964752197265625f,   19.184688568115234f,   19.404624938964844f,   19.624561309814453f,   19.844497680664062f,
              20.064434051513672f,   20.284370422363281f,   20.504306793212891f,   20.724243164062500f,   20.944179534912109f,
              21.799043655395508f,   22.653907775878906f,   23.081338882446289f,   23.081338882446289f,   23.508771896362305f,
              24.363636016845703f,   25.218500137329102f,   26.073366165161133f,   26.928230285644531f,   27.000000000000000f,
              32.000000000000000f,   38.000000000000000f,   45.000000000000000f,   52.000000000000000f,   60.000000000000000f,
              71.000000000000000f,   83.000000000000000f,   97.000000000000000f,  112.000000000000000f,  130.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Healing Versatility rating for 1% Healing Versatility
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HealingVersatilityRatingMultiplier(int Level)
        {
            return _healingVersatilityRatingMultiplier[Level - 1];
        }
        #endregion

        #region Mitigation Versatility
        private static readonly List<float> _mitigationVersatilityRatingMultiplier = new List<float>()
        {
               1.272728323936462f,    1.272728323936462f,    1.272728323936462f,    1.272728323936462f,    1.272728323936462f,
               1.272728323936462f,    1.272728323936462f,    1.272728323936462f,    1.272728323936462f,    1.272728323936462f,
               1.909090161323547f,    2.545454263687134f,    3.181818485260010f,    3.818182706832886f,    4.454544544219971f,
               5.090908527374268f,    5.727272987365723f,    6.363636970520020f,    6.999999046325684f,    7.636363029479980f,
               8.272727012634277f,    8.909090995788574f,    9.545455932617188f,   10.181817054748535f,   10.818181991577148f,
              11.454545974731445f,   12.090909957885742f,   12.727272033691406f,   13.363636016845703f,   14.000000000000000f,
              14.636362075805664f,   15.272726058959961f,   15.909090042114258f,   16.545454025268555f,   17.181818008422852f,
              17.818181991577148f,   18.454547882080078f,   19.090908050537109f,   19.727273941040039f,   20.363634109497070f,
              21.000000000000000f,   21.636363983154297f,   22.272727966308594f,   22.909090042114258f,   23.545454025268555f,
              24.181819915771484f,   24.818181991577148f,   25.454547882080078f,   26.090909957885742f,   26.727273941040039f,
              27.363636016845703f,   28.000001907348633f,   28.636363983154297f,   29.272731781005859f,   29.909093856811523f,
              30.545459747314453f,   31.181818008422852f,   31.818183898925781f,   32.454547882080078f,   33.090908050537109f,
              33.530780792236328f,   33.970653533935547f,   34.410526275634766f,   34.850399017333984f,   35.290271759033203f,
              35.730144500732422f,   36.170017242431641f,   36.609889984130859f,   37.049758911132812f,   37.489631652832031f,
              37.929504394531250f,   38.369377136230469f,   38.809249877929688f,   39.249122619628906f,   39.688995361328125f,
              40.128868103027344f,   40.568740844726562f,   41.008613586425781f,   41.448486328125000f,   41.888359069824219f,
              43.598087310791016f,   45.307815551757812f,   46.162677764892578f,   46.162677764892578f,   47.017543792724609f,
              48.727272033691406f,   50.437000274658203f,   52.146732330322266f,   53.856460571289062f,   54.000000000000000f,
              64.000000000000000f,   76.000000000000000f,   90.000000000000000f,  104.000000000000000f,  120.000000000000000f,
             142.000000000000000f,  166.000000000000000f,  194.000000000000000f,  224.000000000000000f,  260.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Mitigation Versatility rating for 1% Mitigation Versatility
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MitigationVersatilityRatingMultiplier(int Level)
        {
            return _mitigationVersatilityRatingMultiplier[Level - 1];
        }
        #endregion

        #region Leech
        private static readonly List<float> _leechRatingMultiplier = new List<float>()
        {
               1.346155047416687f,    1.346155047416687f,    1.346155047416687f,    1.346155047416687f,    1.346155047416687f,
               1.346155047416687f,    1.346155047416687f,    1.346155047416687f,    1.346155047416687f,    1.346155047416687f,
               2.019229888916016f,    2.692307472229004f,    3.365385055541992f,    4.038462638854980f,    4.711537361145020f,
               5.384614944458008f,    6.057692527770996f,    6.730770111083984f,    7.403844833374023f,    8.076922416687012f,
               8.750000000000000f,    9.423077583312988f,   10.096155166625977f,   10.769229888916016f,   11.442307472229004f,
              12.115385055541992f,   12.788462638854980f,   13.461537361145020f,   14.134614944458008f,   14.807692527770996f,
              15.480767250061035f,   16.153844833374023f,   16.826923370361328f,   17.500000000000000f,   18.173076629638672f,
              18.846155166625977f,   19.519231796264648f,   20.192308425903320f,   20.865385055541992f,   21.538459777832031f,
              22.211538314819336f,   22.884614944458008f,   23.557691574096680f,   24.230768203735352f,   24.903844833374023f,
              25.576925277709961f,   26.250000000000000f,   26.923080444335938f,   27.596155166625977f,   28.269231796264648f,
              28.942308425903320f,   29.615386962890625f,   30.288461685180664f,   30.961542129516602f,   31.634616851806641f,
              32.307697296142578f,   32.980770111083984f,   33.653846740722656f,   34.326923370361328f,   35.000000000000000f,
              35.465248107910156f,   35.930500030517578f,   36.395748138427734f,   36.861000061035156f,   37.326248168945312f,
              37.791496276855469f,   38.256748199462891f,   38.721996307373047f,   39.187248229980469f,   39.652496337890625f,
              40.117744445800781f,   40.582996368408203f,   41.048244476318359f,   41.513496398925781f,   41.978744506835938f,
              42.443996429443359f,   42.909244537353516f,   43.374492645263672f,   43.839744567871094f,   44.304992675781250f,
              46.113361358642578f,   47.921726226806641f,   48.825912475585938f,   48.825912475585938f,   49.730094909667969f,
              51.538459777832031f,   53.346828460693359f,   55.155197143554688f,   56.963562011718750f,   57.000000000000000f,
              68.000000000000000f,   80.000000000000000f,   95.000000000000000f,  110.000000000000000f,  128.000000000000000f,
             150.000000000000000f,  175.000000000000000f,  205.000000000000000f,  238.000000000000000f,  275.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the user and returns the required Leech rating for 1% Leech
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float LeechRatingMultiplier(int Level)
        {
            return _leechRatingMultiplier[Level - 1];
        }
        #endregion

        #endregion

        #region Agility to Dodge
        #region Warrior
        private static readonly List<float> _warriorAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorAgilityToDodge(int Level)
        {
            return _warriorAgilityToDodge[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<float> _paladinAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinAgilityToDodge(int Level)
        {
            return _paladinAgilityToDodge[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<float> _hunterAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.042100f,
            0.037100f,    0.035500f,    0.033800f,    0.032500f,    0.031700f,
            0.030200f,    0.029500f,    0.028800f,    0.028000f,    0.027100f,
            0.025400f,    0.023500f,    0.022100f,    0.023400f,    0.022400f,
            0.023100f,    0.019400f,    0.019200f,    0.017500f,    0.0133266f,
            0.011115826f, 0.008905052f, 0.006694278f, 0.004483504f, 0.00227273f,
            0.002028454f, 0.001784178f, 0.001539902f, 0.001295626f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterAgilityToDodge(int Level)
        {
            return _hunterAgilityToDodge[Level - 1];
        }
        public static float HunterAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / HunterAgilityToDodge(Level);
        }
        #endregion

        #region Rogue
        private static readonly List<float> _rogueAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.068900f,
            0.064200f,    0.061800f,    0.058400f,    0.056700f,    0.054700f,
            0.052900f,    0.051400f,    0.050100f,    0.049400f,    0.047500f,
            0.044500f,    0.041300f,    0.038500f,    0.035700f,    0.033600f,
            0.030900f,    0.029000f,    0.027100f,    0.025100f,    0.0240537f,
            0.020064260f, 0.016074820f, 0.012085380f, 0.008095940f, 0.004106500f,
            0.003495470f, 0.002884440f, 0.002273410f, 0.001662380f, 0.001051349f,     // ** Fix  
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueAgilityToDodge(int Level)
        {
            return _rogueAgilityToDodge[Level - 1];
        }
        public static float RogueAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / RogueAgilityToDodge(Level);
        }
        #endregion

        #region Priest
        private static readonly List<float> _priestAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.049200f,
            0.045000f,    0.044400f,    0.044100f,    0.043300f,    0.042800f,
            0.041900f,    0.041400f,    0.041200f,    0.041000f,    0.040000f,
            0.037200f,    0.034600f,    0.032200f,    0.029800f,    0.027700f,
            0.025800f,    0.024000f,    0.022300f,    0.020700f,    0.0192366f,
            0.013500f,    0.009590f,    0.007489833f, 0.005389667f, 0.0032895f,
            0.00284187f,  0.00239424f,  0.001946610f, 0.001498980f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestAgilityToDodge(int Level)
        {
            return _priestAgilityToDodge[Level - 1];
        }
        public static float PriestAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / PriestAgilityToDodge(Level);
        }
        #endregion

        #region Death Knight
        private static readonly List<float> _deathknightAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightAgilityToDodge(int Level)
        {
            return _deathknightAgilityToDodge[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<float> _shamanAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.053600f,
            0.049400f,    0.048200f,    0.047200f,    0.044900f,    0.044200f,
            0.043000f,    0.042100f,    0.040900f,    0.040300f,    0.039600f,
            0.036800f,    0.034200f,    0.031700f,    0.029500f,    0.027500f,
            0.025500f,    0.023800f,    0.022100f,    0.020600f,    0.0192366f,
            0.016047174f, 0.012857748f, 0.009668322f, 0.006478896f, 0.003289470f,
            0.002841846f, 0.002394222f, 0.001946598f, 0.001498974f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanAgilityToDodge(int Level)
        {
            return _shamanAgilityToDodge[Level - 1];
        }
        public static float ShamanAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / ShamanAgilityToDodge(Level);
        }
        #endregion

        #region Mage
        private static readonly List<float> _mageAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.0521f,
            0.045400f,    0.044200f,    0.042800f,    0.042900f,    0.0428f,
            0.041700f,    0.041700f,    0.041800f,    0.040600f,    0.0406f,
            0.037600f,    0.035200f,    0.032900f,    0.030300f,    0.0280f,
            0.026200f,    0.024100f,    0.022700f,    0.020800f,    0.0195253f,
            0.01628654f,  0.01304778f,  0.00980902f,  0.00657026f,  0.0033315f, // ** Fix
            0.00287547f,  0.00241944f,  0.00196341f,  0.00150738f,  0.001051349f,       
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageAgilityToDodge(int Level)
        {
            return _mageAgilityToDodge[Level - 1];
        }
        public static float MageAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / MageAgilityToDodge(Level);
        }
        #endregion

        #region Warlock
        private static readonly List<float> _warlockAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.057000f,
            0.048800f,    0.047700f,    0.046500f,    0.045000f,    0.044200f,
            0.043100f,    0.043000f,    0.042000f,    0.040900f,    0.040100f,
            0.037200f,    0.034700f,    0.032200f,    0.029800f,    0.027700f,
            0.025800f,    0.024000f,    0.022400f,    0.020700f,    0.0192366f,
            0.016046408f, 0.012856216f, 0.009666024f, 0.006475832f, 0.003285640f,
            0.002838782f, 0.002391924f, 0.001945066f, 0.001498208f, 0.001051349f,       // ** Fix
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockAgilityToDodge(int Level)
        {
            return _warlockAgilityToDodge[Level - 1];
        }
        public static float WarlockAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / WarlockAgilityToDodge(Level);
        }
        #endregion

        #region Monk
        private static readonly List<float> _monkAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.061500f,
            0.058500f,    0.057400f,    0.055100f,    0.054100f,    0.053100f,
            0.052000f,    0.051000f,    0.049600f,    0.048900f,    0.047700f,
            0.045300f,    0.045900f,    0.039200f,    0.037000f,    0.033400f,
            0.032000f,    0.029500f,    0.027300f,    0.025400f,    0.0240458f,
            0.02005772f,  0.01606964f,  0.01208156f,  0.00809348f,  0.0041054f,
            0.00349459f,  0.00288378f,  0.00227297f,  0.00166216f,  0.001051349f,      // ** Fix 
       };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkAgilityToDodge(int Level)
        {
            return _monkAgilityToDodge[Level - 1];
        }
        public static float MonkAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / MonkAgilityToDodge(Level);
        }
        #endregion

        #region Druid
        private static readonly List<float> _druidAgilityToDodge = new List<float>()
        {
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.000000f,
            0.000000f,    0.000000f,    0.000000f,    0.000000f,    0.061500f,
            0.058500f,    0.057400f,    0.055100f,    0.054100f,    0.053100f,
            0.052000f,    0.051000f,    0.049600f,    0.048900f,    0.047700f,
            0.045300f,    0.045900f,    0.039200f,    0.037000f,    0.033400f,
            0.032000f,    0.029500f,    0.027300f,    0.025400f,    0.0240458f,
            0.02005772f,  0.01606964f,  0.01208156f,  0.00809348f,  0.0041054f,
            0.00349459f,  0.00288378f,  0.00227297f,  0.00166216f,  0.001051349f,      // ** Fix 
        };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Agility needed to generate 1% Dodge
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidAgilityToDodge(int Level)
        {
            return _druidAgilityToDodge[Level - 1];
        }
        public static float DruidAgilityNeededForOnePercentDodge(int Level)
        {
            return 1 / DruidAgilityToDodge(Level);
        }
        #endregion
        #endregion

        #region Agility needed for 1% Physical Crit
        #region Warrior
        private static readonly List<float> _warriorChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorChanceToMeleeCrit(int Level)
        {
            return _warriorChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<float> _paladinChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinChanceToMeleeCrit(int Level)
        {
            return _paladinChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<float> _hunterChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Agility needed to generate 1% Physical/Range Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterChanceToMeleeCrit(int Level)
        {
            return _hunterChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly List<float> _rogueChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueChanceToMeleeCrit(int Level)
        {
            return _rogueChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly List<float> _priestChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestChanceToMeleeCrit(int Level)
        {
            return _priestChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly List<float> _deathKnightChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightChanceToMeleeCrit(int Level)
        {
            return _deathKnightChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<float> _shamanChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanChanceToMeleeCrit(int Level)
        {
            return _shamanChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly List<float> _mageChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageChanceToMeleeCrit(int Level)
        {
            return _mageChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly List<float> _warlockChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockChanceToMeleeCrit(int Level)
        {
            return _warlockChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly List<float> _monkChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkChanceToMeleeCrit(int Level)
        {
            return _monkChanceToMeleeCrit[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly List<float> _druidChanceToMeleeCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Agility needed to generate 1% Physical Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidChanceToMeleeCrit(int Level)
        {
            return _druidChanceToMeleeCrit[Level - 1];
        }
        #endregion
        #endregion

        #region Intellect needed for 1% Spell Crit
        #region Warrior
        private static readonly List<float> _warriorChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorChanceToSpellCrit(int Level)
        {
            return _warriorChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<float> _paladinChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinChanceToSpellCrit(int Level)
        {
            return _paladinChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<float> _hunterChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterChanceToSpellCrit(int Level)
        {
            return _hunterChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly List<float> _rogueChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueChanceToSpellCrit(int Level)
        {
            return _rogueChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly List<float> _priestChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestChanceToSpellCrit(int Level)
        {
            return _priestChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly List<float> _deathKnightChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightChanceToSpellCrit(int Level)
        {
            return _deathKnightChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<float> _shamanChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanChanceToSpellCrit(int Level)
        {
            return _shamanChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly List<float> _mageChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageChanceToSpellCrit(int Level)
        {
            return _mageChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly List<float> _warlockChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockChanceToSpellCrit(int Level)
        {
            return _warlockChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly List<float> _monkChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkChanceToSpellCrit(int Level)
        {
            return _monkChanceToSpellCrit[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly List<float> _druidChanceToSpellCrit = new List<float>()
        {
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
            float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,    float.PositiveInfinity,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the amount of Intellect needed to generate 1% Spell Crit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidChanceToSpellCrit(int Level)
        {
            return _druidChanceToSpellCrit[Level - 1];
        }
        #endregion
        #endregion

        #region Spell Scaling Multiplier for Abilities
        #region Warrior
        private static readonly List<float> _warriorSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorSpellScaling(int Level)
        {
            return _warriorSpellScaling[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<float> _paladinSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinSpellScaling(int Level)
        {
            return _paladinSpellScaling[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<float> _hunterSpellScaling = new List<float>
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterSpellScaling(int Level)
        {
            return _hunterSpellScaling[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly List<float> _rogueSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueSpellScaling(int Level)
        {
            return _rogueSpellScaling[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly List<float> _priestSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestSpellScaling(int Level)
        {
            return _priestSpellScaling[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly List<float> _deathKnightSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightSpellScaling(int Level)
        {
            return _deathKnightSpellScaling[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<float> _shamanSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanSpellScaling(int Level)
        {
            return _shamanSpellScaling[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly List<float> _mageSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageSpellScaling(int Level)
        {
            return _mageSpellScaling[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly List<float> _warlockSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockSpellScaling(int Level)
        {
            return _warlockSpellScaling[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly List<float> _monkSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkSpellScaling(int Level)
        {
            return _monkSpellScaling[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly List<float> _druidSpellScaling = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidSpellScaling(int Level)
        {
            return _druidSpellScaling[Level - 1];
        }
        #endregion

        #region Constant Scaling
        private static readonly List<float> _constantSpellScaling = new List<float>()
        {
			   3.000000000000000f,    3.000000000000000f,    4.000000000000000f,    4.000000000000000f,    5.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    7.000000000000000f,    7.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    9.000000000000000f,    9.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  11.000000000000000f,   11.000000000000000f,   12.000000000000000f,   12.000000000000000f,   13.000000000000000f,
			  13.000000000000000f,   14.000000000000000f,   14.000000000000000f,   15.000000000000000f,   15.000000000000000f,
			  16.000000000000000f,   16.000000000000000f,   17.000000000000000f,   17.000000000000000f,   18.000000000000000f,
			  18.000000000000000f,   19.000000000000000f,   19.000000000000000f,   20.000000000000000f,   20.000000000000000f,
			  21.000000000000000f,   21.000000000000000f,   22.000000000000000f,   22.000000000000000f,   23.000000000000000f,
			  23.000000000000000f,   24.000000000000000f,   24.000000000000000f,   25.000000000000000f,   25.000000000000000f,
			  26.000000000000000f,   26.000000000000000f,   27.000000000000000f,   27.000000000000000f,   28.000000000000000f,
			  28.000000000000000f,   29.000000000000000f,   29.000000000000000f,   30.000000000000000f,   30.000000000000000f,
			  31.000000000000000f,   31.000000000000000f,   32.000000000000000f,   32.000000000000000f,   33.000000000000000f,
			  35.000000000000000f,   37.000000000000000f,   39.000000000000000f,   39.000000000000000f,   40.000000000000000f,
			  40.000000000000000f,   41.000000000000000f,   41.000000000000000f,   42.000000000000000f,   43.000000000000000f,
			  45.000000000000000f,   47.000000000000000f,   49.000000000000000f,   49.000000000000000f,   50.000000000000000f,
			  50.000000000000000f,   51.000000000000000f,   51.000000000000000f,   52.000000000000000f,   52.000000000000000f,
			  54.000000000000000f,   56.000000000000000f,   57.000000000000000f,   57.000000000000000f,   58.000000000000000f,
			  60.000000000000000f,   63.000000000000000f,   65.000000000000000f,   66.000000000000000f,   67.000000000000000f,
			 101.000000000000000f,  118.000000000000000f,  139.000000000000000f,  162.000000000000000f,  190.000000000000000f,
			 225.000000000000000f,  234.000000000000000f,  242.000000000000000f,  252.000000000000000f,  261.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the character and returns the Constant Spell Scaling of the spell
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ConstantSpellScaling(int Level)
        {
            return _constantSpellScaling[Level - 1];
        }
        #endregion

		#region Constant Scaling 2
		private static readonly List<float> _constantSpellScaling2 = new List<float>()
        {
			 360.000000000000000f,  360.000000000000000f,  360.000000000000000f,  360.000000000000000f,  360.000000000000000f,
			 870.000000000000000f,  870.000000000000000f,  870.000000000000000f,  870.000000000000000f,  870.000000000000000f,
			1300.000000000000000f, 1300.000000000000000f, 1300.000000000000000f, 1300.000000000000000f, 1300.000000000000000f,
			2000.000000000000000f, 2000.000000000000000f, 2000.000000000000000f, 2000.000000000000000f, 2000.000000000000000f,
			2900.000000000000000f, 2900.000000000000000f, 2900.000000000000000f, 2900.000000000000000f, 2900.000000000000000f,
			3900.000000000000000f, 3900.000000000000000f, 3900.000000000000000f, 3900.000000000000000f, 3900.000000000000000f,
			4900.000000000000000f, 4900.000000000000000f, 4900.000000000000000f, 4900.000000000000000f, 4900.000000000000000f,
			6200.000000000000000f, 6200.000000000000000f, 6200.000000000000000f, 6200.000000000000000f, 6200.000000000000000f,
			7400.000000000000000f, 7400.000000000000000f, 7400.000000000000000f, 7400.000000000000000f, 7400.000000000000000f,
			9000.000000000000000f, 9000.000000000000000f, 9000.000000000000000f, 9000.000000000000000f, 9000.000000000000000f,
			10500.000000000000000f, 10500.000000000000000f, 10500.000000000000000f, 10500.000000000000000f, 10500.000000000000000f,
			12500.000000000000000f, 12500.000000000000000f, 12500.000000000000000f, 12500.000000000000000f, 12500.000000000000000f,
			15500.000000000000000f, 15500.000000000000000f, 15500.000000000000000f, 15500.000000000000000f, 15500.000000000000000f,
			17000.000000000000000f, 17000.000000000000000f, 17000.000000000000000f, 17000.000000000000000f, 17000.000000000000000f,
			20500.000000000000000f, 20500.000000000000000f, 20500.000000000000000f, 20500.000000000000000f, 20500.000000000000000f,
			24500.000000000000000f, 24500.000000000000000f, 24500.000000000000000f, 24500.000000000000000f, 24500.000000000000000f,
			30000.000000000000000f, 30000.000000000000000f, 30000.000000000000000f, 30000.000000000000000f, 30000.000000000000000f,
			37000.000000000000000f, 37000.000000000000000f, 37000.000000000000000f, 37000.000000000000000f, 37000.000000000000000f,
			80000.000000000000000f, 80000.000000000000000f, 80000.000000000000000f, 140000.000000000000000f, 140000.000000000000000f,
			140000.000000000000000f, 170000.000000000000000f, 170000.000000000000000f, 170000.000000000000000f, 170000.000000000000000f,
        };
		/// <summary>
		/// Takes in the level of the character and returns the Constant Spell Scaling of the spell
		/// </summary>
		/// <param name="Level"></param>
		/// <returns></returns>
		public static float ConstantSpellScaling2(int Level)
		{
			return _constantSpellScaling2[Level - 1];
		}
		#endregion

		#region Constant Scaling
		private static readonly List<float> _constantSpellScaling3 = new List<float>()
        {
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,    5.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			  60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f,
			  60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f,
        };
		/// <summary>
		/// Takes in the level of the character and returns the Constant Spell Scaling of the spell
		/// </summary>
		/// <param name="Level"></param>
		/// <returns></returns>
		public static float ConstantSpellScaling3(int Level)
		{
			return _constantSpellScaling3[Level - 1];
		}
		#endregion

		#region Constant Scaling
		private static readonly List<float> _constantSpellScaling4 = new List<float>()
        {
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,    6.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  80.000000000000000f,   80.000000000000000f,   80.000000000000000f,   80.000000000000000f,   80.000000000000000f,
			  80.000000000000000f,   80.000000000000000f,   80.000000000000000f,   80.000000000000000f,   80.000000000000000f,
        };
		/// <summary>
		/// Takes in the level of the character and returns the Constant Spell Scaling of the spell
		/// </summary>
		/// <param name="Level"></param>
		/// <returns></returns>
		public static float ConstantSpellScaling4(int Level)
		{
			return _constantSpellScaling4[Level - 1];
		}
		#endregion

		#region Constant Scaling
		private static readonly List<float> _constantSpellScaling5 = new List<float>()
        {
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			   8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,    8.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,   10.000000000000000f,
			  12.000000000000000f,   12.000000000000000f,   12.000000000000000f,   12.000000000000000f,   12.000000000000000f,
			 100.000000000000000f,  100.000000000000000f,  100.000000000000000f,  100.000000000000000f,  100.000000000000000f,
			 100.000000000000000f,  100.000000000000000f,  100.000000000000000f,  100.000000000000000f,  100.000000000000000f,
        };
		/// <summary>
		/// Takes in the level of the character and returns the Constant Spell Scaling of the spell
		/// </summary>
		/// <param name="Level"></param>
		/// <returns></returns>
		public static float ConstantSpellScaling5(int Level)
		{
			return _constantSpellScaling5[Level - 1];
		}
		#endregion
        #endregion

        #region Boss Armor
        public static float Get_BossArmor(int Level)
        {
            switch (Level)
            {
                case 80: return 9729f;
                case 81: return 10034f;
                case 82: return 10338f;
                case 83: return 10643f;
                case 84: return 10880f;
                case 85: return 11092f;
                case 86: return 11387f;
                case 87: return 11682f;
                case 88: return 11977f;
                case 89: return 20140f; // TODO: get Actual values; Guesses at this point
                case 90: return 22900f; 
                case 91: return 23546f;
                case 92: return 24191f;
                case 93: return 24835f; // Confirmed
                default:
                    if (Level < 80)
                        return (float)Math.Floor((Level / 80.0) * 9729);
                    else
                        return 0;
            }

        }
        #endregion

        #region Mana Per Spirit
        private static readonly List<float> _manaPerSpirit = new List<float>()
        {
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
           0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,    0.824414074420929f,
       };
        /// <summary>
        /// Takes in the level of the Player and returns the Mana Per Spirit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ManaPerSpirit(int Level)
        {
            return _manaPerSpirit[Level - 1];
        }
        private static readonly List<float> _mageManaPerSpirit = new List<float>()
        {
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
           0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,    0.206103518605232f,
       };
        /// <summary>
        /// Takes in the level of the Mage and returns the Mana Per Spirit
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageManaPerSpirit(int Level)
        {
            return _mageManaPerSpirit[Level - 1];
        }
        #endregion

        #region HP Per Stamina
        private static readonly List<float> _hPPerStamina = new List<float>()
        {
          14.000000000000000f,   14.000000000000000f,   15.000000000000000f,   16.000000000000000f,   17.000000000000000f, 
          18.000000000000000f,   18.000000000000000f,   18.000000000000000f,   18.000000000000000f,   18.000000000000000f, 
          18.000000000000000f,   18.000000000000000f,   18.000000000000000f,   18.000000000000000f,   18.000000000000000f, 
          18.000000000000000f,   18.000000000000000f,   18.000000000000000f,   19.000000000000000f,   19.000000000000000f, 
          20.000000000000000f,   20.000000000000000f,   20.000000000000000f,   20.000000000000000f,   22.000000000000000f, 
          22.000000000000000f,   22.000000000000000f,   22.000000000000000f,   24.000000000000000f,   24.000000000000000f, 
          24.000000000000000f,   24.000000000000000f,   25.000000000000000f,   25.000000000000000f,   26.000000000000000f, 
          26.000000000000000f,   26.000000000000000f,   26.000000000000000f,   28.000000000000000f,   28.000000000000000f, 
          28.000000000000000f,   28.000000000000000f,   29.000000000000000f,   29.000000000000000f,   30.000000000000000f, 
          30.000000000000000f,   31.000000000000000f,   31.000000000000000f,   32.000000000000000f,   32.000000000000000f, 
          33.000000000000000f,   33.000000000000000f,   33.000000000000000f,   34.000000000000000f,   34.000000000000000f, 
          34.000000000000000f,   35.000000000000000f,   35.000000000000000f,   36.000000000000000f,   36.000000000000000f, 
          36.000000000000000f,   36.000000000000000f,   36.000000000000000f,   36.000000000000000f,   36.000000000000000f, 
          36.000000000000000f,   36.000000000000000f,   36.000000000000000f,   37.000000000000000f,   37.000000000000000f, 
          37.000000000000000f,   37.000000000000000f,   37.000000000000000f,   37.000000000000000f,   38.000000000000000f, 
          39.000000000000000f,   40.000000000000000f,   42.000000000000000f,   42.000000000000000f,   43.000000000000000f, 
          43.000000000000000f,   43.000000000000000f,   44.000000000000000f,   46.000000000000000f,   47.000000000000000f, 
          48.000000000000000f,   48.000000000000000f,   48.000000000000000f,   49.000000000000000f,   49.000000000000000f, 
          49.000000000000000f,   53.000000000000000f,   55.000000000000000f,   58.000000000000000f,   60.000000000000000f, 
          60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f,   60.000000000000000f, 
       };
        /// <summary>
        /// Takes in the level of the Player and returns the HP per Stamina
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HPPerStamina(int Level)
        {
            return _hPPerStamina[Level - 1];
        }
         #endregion

        #region Base HP
        private static readonly List<float> _baseHP = new List<float>()
        {
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
               0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Player and returns the base HP amount
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float BaseHP(int Level)
        {
            return _baseHP[Level - 1];
        }
        #endregion

        #region Base Mana
        #region Warrior
        private static readonly List<float> _warriorBaseMana = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarriorBaseMana(int Level)
        {
            return _warriorBaseMana[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<float> _paladinBaseMana = new List<float>()
        {
              31.000000000000000f,   34.000000000000000f,   36.000000000000000f,   42.000000000000000f,   71.000000000000000f,
             101.000000000000000f,  104.000000000000000f,  137.000000000000000f,  140.000000000000000f,  173.000000000000000f,
             176.000000000000000f,  212.000000000000000f,  220.000000000000000f,  252.000000000000000f,  256.000000000000000f,
             292.000000000000000f,  298.000000000000000f,  334.000000000000000f,  362.000000000000000f,  400.000000000000000f,
             420.000000000000000f,  460.000000000000000f,  480.000000000000000f,  520.000000000000000f,  580.000000000000000f,
             620.000000000000000f,  620.000000000000000f,  660.000000000000000f,  740.000000000000000f,  780.000000000000000f,
             780.000000000000000f,  840.000000000000000f,  880.000000000000000f,  940.000000000000000f,  980.000000000000000f,
            1020.000000000000000f, 1040.000000000000000f, 1080.000000000000000f, 1180.000000000000000f, 1240.000000000000000f,
            1240.000000000000000f, 1300.000000000000000f, 1360.000000000000000f, 1420.000000000000000f, 1480.000000000000000f,
            1540.000000000000000f, 1600.000000000000000f, 1660.000000000000000f, 1720.000000000000000f, 1780.000000000000000f,
            1840.000000000000000f, 1920.000000000000000f, 1940.000000000000000f, 2040.000000000000000f, 2060.000000000000000f,
            2140.000000000000000f, 2200.000000000000000f, 2280.000000000000000f, 2360.000000000000000f, 2420.000000000000000f,
            2600.000000000000000f, 2760.000000000000000f, 2920.000000000000000f, 2940.000000000000000f, 3020.000000000000000f,
            3020.000000000000000f, 3080.000000000000000f, 3100.000000000000000f, 3260.000000000000000f, 3380.000000000000000f,
            3520.000000000000000f, 3700.000000000000000f, 3860.000000000000000f, 3880.000000000000000f, 4060.000000000000000f,
            4180.000000000000000f, 4360.000000000000000f, 4600.000000000000000f, 4680.000000000000000f, 4880.000000000000000f,
            5100.000000000000000f, 5280.000000000000000f, 5520.000000000000000f, 5780.000000000000000f, 6000.000000000000000f,
            6400.000000000000000f, 6600.000000000000000f, 6800.000000000000000f, 7200.000000000000000f, 7400.000000000000000f,
            10200.000000000000000f, 13000.000000000000000f, 15600.000000000000000f, 19400.000000000000000f, 24000.000000000000000f,
            27600.000000000000000f, 28800.000000000000000f, 30000.000000000000000f, 31000.000000000000000f, 32000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PaladinBaseMana(int Level)
        {
            return _paladinBaseMana[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<float> _hunterBaseMana = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float HunterBaseMana(int Level)
        {
            return _hunterBaseMana[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly List<float> _rogueBaseMana = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
         };
        /// <summary>
        /// Takes in the level of the Rogue and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float RogueBaseMana(int Level)
        {
            return _rogueBaseMana[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly List<float> _priestBaseMana = new List<float>()
        {
             155.000000000000000f,  170.000000000000000f,  180.000000000000000f,  210.000000000000000f,  355.000000000000000f,
             505.000000000000000f,  520.000000000000000f,  685.000000000000000f,  700.000000000000000f,  865.000000000000000f,
             880.000000000000000f, 1060.000000000000000f, 1100.000000000000000f, 1260.000000000000000f, 1280.000000000000000f,
            1460.000000000000000f, 1490.000000000000000f, 1670.000000000000000f, 1810.000000000000000f, 2000.000000000000000f,
            2100.000000000000000f, 2300.000000000000000f, 2400.000000000000000f, 2600.000000000000000f, 2900.000000000000000f,
            3100.000000000000000f, 3100.000000000000000f, 3300.000000000000000f, 3700.000000000000000f, 3900.000000000000000f,
            3900.000000000000000f, 4200.000000000000000f, 4400.000000000000000f, 4700.000000000000000f, 4900.000000000000000f,
            5100.000000000000000f, 5200.000000000000000f, 5400.000000000000000f, 5900.000000000000000f, 6200.000000000000000f,
            6200.000000000000000f, 6500.000000000000000f, 6800.000000000000000f, 7100.000000000000000f, 7400.000000000000000f,
            7700.000000000000000f, 8000.000000000000000f, 8300.000000000000000f, 8600.000000000000000f, 8900.000000000000000f,
            9200.000000000000000f, 9600.000000000000000f, 9700.000000000000000f, 10200.000000000000000f, 10300.000000000000000f,
            10700.000000000000000f, 11000.000000000000000f, 11400.000000000000000f, 11800.000000000000000f, 12100.000000000000000f,
            13000.000000000000000f, 13800.000000000000000f, 14600.000000000000000f, 14700.000000000000000f, 15100.000000000000000f,
            15100.000000000000000f, 15400.000000000000000f, 15500.000000000000000f, 16300.000000000000000f, 16900.000000000000000f,
            17600.000000000000000f, 18500.000000000000000f, 19300.000000000000000f, 19400.000000000000000f, 20300.000000000000000f,
            20900.000000000000000f, 21800.000000000000000f, 23000.000000000000000f, 23400.000000000000000f, 24400.000000000000000f,
            25500.000000000000000f, 26400.000000000000000f, 27600.000000000000000f, 28900.000000000000000f, 30000.000000000000000f,
            32000.000000000000000f, 33000.000000000000000f, 34000.000000000000000f, 36000.000000000000000f, 37000.000000000000000f,
            51000.000000000000000f, 65000.000000000000000f, 78000.000000000000000f, 97000.000000000000000f, 120000.000000000000000f,
            138000.000000000000000f, 144000.000000000000000f, 150000.000000000000000f, 155000.000000000000000f, 160000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float PriestBaseMana(int Level)
        {
            return _priestBaseMana[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly List<float> _deathKnightBaseMana = new List<float>()
        {
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
            0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,    0.000000000000000f,
       };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DeathKnightBaseMana(int Level)
        {
            return _deathKnightBaseMana[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<float> _shamanBaseMana = new List<float>()
        {
              31.000000000000000f,   34.000000000000000f,   36.000000000000000f,   42.000000000000000f,   71.000000000000000f,
             101.000000000000000f,  104.000000000000000f,  137.000000000000000f,  140.000000000000000f,  173.000000000000000f,
             176.000000000000000f,  212.000000000000000f,  220.000000000000000f,  252.000000000000000f,  256.000000000000000f,
             292.000000000000000f,  298.000000000000000f,  334.000000000000000f,  362.000000000000000f,  400.000000000000000f,
             420.000000000000000f,  460.000000000000000f,  480.000000000000000f,  520.000000000000000f,  580.000000000000000f,
             620.000000000000000f,  620.000000000000000f,  660.000000000000000f,  740.000000000000000f,  780.000000000000000f,
             780.000000000000000f,  840.000000000000000f,  880.000000000000000f,  940.000000000000000f,  980.000000000000000f,
            1020.000000000000000f, 1040.000000000000000f, 1080.000000000000000f, 1180.000000000000000f, 1240.000000000000000f,
            1240.000000000000000f, 1300.000000000000000f, 1360.000000000000000f, 1420.000000000000000f, 1480.000000000000000f,
            1540.000000000000000f, 1600.000000000000000f, 1660.000000000000000f, 1720.000000000000000f, 1780.000000000000000f,
            1840.000000000000000f, 1920.000000000000000f, 1940.000000000000000f, 2040.000000000000000f, 2060.000000000000000f,
            2140.000000000000000f, 2200.000000000000000f, 2280.000000000000000f, 2360.000000000000000f, 2420.000000000000000f,
            2600.000000000000000f, 2760.000000000000000f, 2920.000000000000000f, 2940.000000000000000f, 3020.000000000000000f,
            3020.000000000000000f, 3080.000000000000000f, 3100.000000000000000f, 3260.000000000000000f, 3380.000000000000000f,
            3520.000000000000000f, 3700.000000000000000f, 3860.000000000000000f, 3880.000000000000000f, 4060.000000000000000f,
            4180.000000000000000f, 4360.000000000000000f, 4600.000000000000000f, 4680.000000000000000f, 4880.000000000000000f,
            5100.000000000000000f, 5280.000000000000000f, 5520.000000000000000f, 5780.000000000000000f, 6000.000000000000000f,
            6400.000000000000000f, 6600.000000000000000f, 6800.000000000000000f, 7200.000000000000000f, 7400.000000000000000f,
            10200.000000000000000f, 13000.000000000000000f, 15600.000000000000000f, 19400.000000000000000f, 24000.000000000000000f,
            27600.000000000000000f, 28800.000000000000000f, 30000.000000000000000f, 31000.000000000000000f, 32000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float ShamanBaseMana(int Level)
        {
            return _shamanBaseMana[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly List<float> _mageBaseMana = new List<float>()
        {
             155.000000000000000f,  170.000000000000000f,  180.000000000000000f,  210.000000000000000f,  355.000000000000000f,
             505.000000000000000f,  520.000000000000000f,  685.000000000000000f,  700.000000000000000f,  865.000000000000000f,
             880.000000000000000f, 1060.000000000000000f, 1100.000000000000000f, 1260.000000000000000f, 1280.000000000000000f,
            1460.000000000000000f, 1490.000000000000000f, 1670.000000000000000f, 1810.000000000000000f, 2000.000000000000000f,
            2100.000000000000000f, 2300.000000000000000f, 2400.000000000000000f, 2600.000000000000000f, 2900.000000000000000f,
            3100.000000000000000f, 3100.000000000000000f, 3300.000000000000000f, 3700.000000000000000f, 3900.000000000000000f,
            3900.000000000000000f, 4200.000000000000000f, 4400.000000000000000f, 4700.000000000000000f, 4900.000000000000000f,
            5100.000000000000000f, 5200.000000000000000f, 5400.000000000000000f, 5900.000000000000000f, 6200.000000000000000f,
            6200.000000000000000f, 6500.000000000000000f, 6800.000000000000000f, 7100.000000000000000f, 7400.000000000000000f,
            7700.000000000000000f, 8000.000000000000000f, 8300.000000000000000f, 8600.000000000000000f, 8900.000000000000000f,
            9200.000000000000000f, 9600.000000000000000f, 9700.000000000000000f, 10200.000000000000000f, 10300.000000000000000f,
            10700.000000000000000f, 11000.000000000000000f, 11400.000000000000000f, 11800.000000000000000f, 12100.000000000000000f,
            13000.000000000000000f, 13800.000000000000000f, 14600.000000000000000f, 14700.000000000000000f, 15100.000000000000000f,
            15100.000000000000000f, 15400.000000000000000f, 15500.000000000000000f, 16300.000000000000000f, 16900.000000000000000f,
            17600.000000000000000f, 18500.000000000000000f, 19300.000000000000000f, 19400.000000000000000f, 20300.000000000000000f,
            20900.000000000000000f, 21800.000000000000000f, 23000.000000000000000f, 23400.000000000000000f, 24400.000000000000000f,
            25500.000000000000000f, 26400.000000000000000f, 27600.000000000000000f, 28900.000000000000000f, 30000.000000000000000f,
            32000.000000000000000f, 33000.000000000000000f, 34000.000000000000000f, 36000.000000000000000f, 37000.000000000000000f,
            51000.000000000000000f, 65000.000000000000000f, 78000.000000000000000f, 97000.000000000000000f, 120000.000000000000000f,
            138000.000000000000000f, 144000.000000000000000f, 150000.000000000000000f, 155000.000000000000000f, 160000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MageBaseMana(int Level)
        {
            return _mageBaseMana[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly List<float> _warlockBaseMana = new List<float>()
        {
             155.000000000000000f,  170.000000000000000f,  180.000000000000000f,  210.000000000000000f,  355.000000000000000f,
             505.000000000000000f,  520.000000000000000f,  685.000000000000000f,  700.000000000000000f,  865.000000000000000f,
             880.000000000000000f, 1060.000000000000000f, 1100.000000000000000f, 1260.000000000000000f, 1280.000000000000000f,
            1460.000000000000000f, 1490.000000000000000f, 1670.000000000000000f, 1810.000000000000000f, 2000.000000000000000f,
            2100.000000000000000f, 2300.000000000000000f, 2400.000000000000000f, 2600.000000000000000f, 2900.000000000000000f,
            3100.000000000000000f, 3100.000000000000000f, 3300.000000000000000f, 3700.000000000000000f, 3900.000000000000000f,
            3900.000000000000000f, 4200.000000000000000f, 4400.000000000000000f, 4700.000000000000000f, 4900.000000000000000f,
            5100.000000000000000f, 5200.000000000000000f, 5400.000000000000000f, 5900.000000000000000f, 6200.000000000000000f,
            6200.000000000000000f, 6500.000000000000000f, 6800.000000000000000f, 7100.000000000000000f, 7400.000000000000000f,
            7700.000000000000000f, 8000.000000000000000f, 8300.000000000000000f, 8600.000000000000000f, 8900.000000000000000f,
            9200.000000000000000f, 9600.000000000000000f, 9700.000000000000000f, 10200.000000000000000f, 10300.000000000000000f,
            10700.000000000000000f, 11000.000000000000000f, 11400.000000000000000f, 11800.000000000000000f, 12100.000000000000000f,
            13000.000000000000000f, 13800.000000000000000f, 14600.000000000000000f, 14700.000000000000000f, 15100.000000000000000f,
            15100.000000000000000f, 15400.000000000000000f, 15500.000000000000000f, 16300.000000000000000f, 16900.000000000000000f,
            17600.000000000000000f, 18500.000000000000000f, 19300.000000000000000f, 19400.000000000000000f, 20300.000000000000000f,
            20900.000000000000000f, 21800.000000000000000f, 23000.000000000000000f, 23400.000000000000000f, 24400.000000000000000f,
            25500.000000000000000f, 26400.000000000000000f, 27600.000000000000000f, 28900.000000000000000f, 30000.000000000000000f,
            32000.000000000000000f, 33000.000000000000000f, 34000.000000000000000f, 36000.000000000000000f, 37000.000000000000000f,
            51000.000000000000000f, 65000.000000000000000f, 78000.000000000000000f, 97000.000000000000000f, 120000.000000000000000f,
            138000.000000000000000f, 144000.000000000000000f, 150000.000000000000000f, 155000.000000000000000f, 160000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float WarlockBaseMana(int Level)
        {
            return _warlockBaseMana[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly List<float> _monkBaseMana = new List<float>()
        {
             155.000000000000000f,  170.000000000000000f,  180.000000000000000f,  210.000000000000000f,  355.000000000000000f,
             505.000000000000000f,  520.000000000000000f,  685.000000000000000f,  700.000000000000000f,  865.000000000000000f,
             880.000000000000000f, 1060.000000000000000f, 1100.000000000000000f, 1260.000000000000000f, 1280.000000000000000f,
            1460.000000000000000f, 1490.000000000000000f, 1670.000000000000000f, 1810.000000000000000f, 2000.000000000000000f,
            2100.000000000000000f, 2300.000000000000000f, 2400.000000000000000f, 2600.000000000000000f, 2900.000000000000000f,
            3100.000000000000000f, 3100.000000000000000f, 3300.000000000000000f, 3700.000000000000000f, 3900.000000000000000f,
            3900.000000000000000f, 4200.000000000000000f, 4400.000000000000000f, 4700.000000000000000f, 4900.000000000000000f,
            5100.000000000000000f, 5200.000000000000000f, 5400.000000000000000f, 5900.000000000000000f, 6200.000000000000000f,
            6200.000000000000000f, 6500.000000000000000f, 6800.000000000000000f, 7100.000000000000000f, 7400.000000000000000f,
            7700.000000000000000f, 8000.000000000000000f, 8300.000000000000000f, 8600.000000000000000f, 8900.000000000000000f,
            9200.000000000000000f, 9600.000000000000000f, 9700.000000000000000f, 10200.000000000000000f, 10300.000000000000000f,
            10700.000000000000000f, 11000.000000000000000f, 11400.000000000000000f, 11800.000000000000000f, 12100.000000000000000f,
            13000.000000000000000f, 13800.000000000000000f, 14600.000000000000000f, 14700.000000000000000f, 15100.000000000000000f,
            15100.000000000000000f, 15400.000000000000000f, 15500.000000000000000f, 16300.000000000000000f, 16900.000000000000000f,
            17600.000000000000000f, 18500.000000000000000f, 19300.000000000000000f, 19400.000000000000000f, 20300.000000000000000f,
            20900.000000000000000f, 21800.000000000000000f, 23000.000000000000000f, 23400.000000000000000f, 24400.000000000000000f,
            25500.000000000000000f, 26400.000000000000000f, 27600.000000000000000f, 28900.000000000000000f, 30000.000000000000000f,
            32000.000000000000000f, 33000.000000000000000f, 34000.000000000000000f, 36000.000000000000000f, 37000.000000000000000f,
            51000.000000000000000f, 65000.000000000000000f, 78000.000000000000000f, 97000.000000000000000f, 120000.000000000000000f,
            138000.000000000000000f, 144000.000000000000000f, 150000.000000000000000f, 155000.000000000000000f, 160000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float MonkBaseMana(int Level)
        {
            return _monkBaseMana[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly List<float> _druidBaseMana = new List<float>()
        {
              31.000000000000000f,   34.000000000000000f,   36.000000000000000f,   42.000000000000000f,   71.000000000000000f,
             101.000000000000000f,  104.000000000000000f,  137.000000000000000f,  140.000000000000000f,  173.000000000000000f,
             176.000000000000000f,  212.000000000000000f,  220.000000000000000f,  252.000000000000000f,  256.000000000000000f,
             292.000000000000000f,  298.000000000000000f,  334.000000000000000f,  362.000000000000000f,  400.000000000000000f,
             420.000000000000000f,  460.000000000000000f,  480.000000000000000f,  520.000000000000000f,  580.000000000000000f,
             620.000000000000000f,  620.000000000000000f,  660.000000000000000f,  740.000000000000000f,  780.000000000000000f,
             780.000000000000000f,  840.000000000000000f,  880.000000000000000f,  940.000000000000000f,  980.000000000000000f,
            1020.000000000000000f, 1040.000000000000000f, 1080.000000000000000f, 1180.000000000000000f, 1240.000000000000000f,
            1240.000000000000000f, 1300.000000000000000f, 1360.000000000000000f, 1420.000000000000000f, 1480.000000000000000f,
            1540.000000000000000f, 1600.000000000000000f, 1660.000000000000000f, 1720.000000000000000f, 1780.000000000000000f,
            1840.000000000000000f, 1920.000000000000000f, 1940.000000000000000f, 2040.000000000000000f, 2060.000000000000000f,
            2140.000000000000000f, 2200.000000000000000f, 2280.000000000000000f, 2360.000000000000000f, 2420.000000000000000f,
            2600.000000000000000f, 2760.000000000000000f, 2920.000000000000000f, 2940.000000000000000f, 3020.000000000000000f,
            3020.000000000000000f, 3080.000000000000000f, 3100.000000000000000f, 3260.000000000000000f, 3380.000000000000000f,
            3520.000000000000000f, 3700.000000000000000f, 3860.000000000000000f, 3880.000000000000000f, 4060.000000000000000f,
            4180.000000000000000f, 4360.000000000000000f, 4600.000000000000000f, 4680.000000000000000f, 4880.000000000000000f,
            5100.000000000000000f, 5280.000000000000000f, 5520.000000000000000f, 5780.000000000000000f, 6000.000000000000000f,
            6400.000000000000000f, 6600.000000000000000f, 6800.000000000000000f, 7200.000000000000000f, 7400.000000000000000f,
            10200.000000000000000f, 13000.000000000000000f, 15600.000000000000000f, 19400.000000000000000f, 24000.000000000000000f,
            27600.000000000000000f, 28800.000000000000000f, 30000.000000000000000f, 31000.000000000000000f, 32000.000000000000000f,
       };
        /// <summary>
        /// Takes in the level of the Druid and returns the Base Mana
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float DruidBaseMana(int Level)
        {
            return _druidBaseMana[Level - 1];
        }
        #endregion
        #endregion

        #region Alternate Power Size
        private static readonly List<float> _alternatePowerSize = new List<float>()
        {
                50.000000000000000f,     65.000000000000000f,     80.000000000000000f,     95.000000000000000f,    110.000000000000000f,
               125.000000000000000f,    140.000000000000000f,    155.000000000000000f,    170.000000000000000f,    200.000000000000000f,
               230.000000000000000f,    260.000000000000000f,    290.000000000000000f,    320.000000000000000f,    350.000000000000000f,
               400.000000000000000f,    450.000000000000000f,    500.000000000000000f,    550.000000000000000f,    600.000000000000000f,
               650.000000000000000f,    700.000000000000000f,    750.000000000000000f,    800.000000000000000f,    850.000000000000000f,
               900.000000000000000f,   1000.000000000000000f,   1100.000000000000000f,   1200.000000000000000f,   1300.000000000000000f,
              1400.000000000000000f,   1500.000000000000000f,   1600.000000000000000f,   1700.000000000000000f,   1800.000000000000000f,
              1900.000000000000000f,   2000.000000000000000f,   2100.000000000000000f,   2200.000000000000000f,   2300.000000000000000f,
              2400.000000000000000f,   2500.000000000000000f,   2600.000000000000000f,   2700.000000000000000f,   2800.000000000000000f,
              2900.000000000000000f,   3000.000000000000000f,   3100.000000000000000f,   3200.000000000000000f,   3300.000000000000000f,
              3400.000000000000000f,   3500.000000000000000f,   3600.000000000000000f,   3700.000000000000000f,   3800.000000000000000f,
              3900.000000000000000f,   4000.000000000000000f,   4100.000000000000000f,   4200.000000000000000f,   4400.000000000000000f,
              4600.000000000000000f,   4900.000000000000000f,   5200.000000000000000f,   5600.000000000000000f,   6000.000000000000000f,
              6400.000000000000000f,   7000.000000000000000f,   7600.000000000000000f,   8200.000000000000000f,   8800.000000000000000f,
              9400.000000000000000f,  10000.000000000000000f,  11000.000000000000000f,  12000.000000000000000f,  13000.000000000000000f,
             14000.000000000000000f,  15000.000000000000000f,  16000.000000000000000f,  17000.000000000000000f,  18000.000000000000000f,
             25000.000000000000000f,  40000.000000000000000f,  60000.000000000000000f,  80000.000000000000000f, 100000.000000000000000f,
            120000.000000000000000f, 160000.000000000000000f, 200000.000000000000000f, 250000.000000000000000f, 300000.000000000000000f,
        };
        /// <summary>
        /// Takes in the level of the character and returns the Alternate Power Size. This is used for classes that don't
        /// use Mana, Energy, Rage, Focus, or Runic Power. Ex: Warlock Destruction and Demonology bars
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float AlternatePowerSize(int Level)
        {
            return _alternatePowerSize[Level - 1];
        }
        #endregion

        #region Class Stats By Level
        //      Str   Agi Sta Int Spi
        #region Warrior
        private static readonly List<BaseCombatStatInfo> _warriorClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     17,     10,     11,      8,      8 ),
            new BaseCombatStatInfo(     19,     12,     12,      9,      9 ),
            new BaseCombatStatInfo(     20,     12,     12,     10,     10 ),
            new BaseCombatStatInfo(     21,     13,     13,     10,     10 ),
            new BaseCombatStatInfo(     21,     13,     13,     10,     10 ), // 5
            new BaseCombatStatInfo(     21,     13,     13,     10,     10 ),
            new BaseCombatStatInfo(     23,     14,     14,     11,     10 ),
            new BaseCombatStatInfo(     24,     15,     15,     12,     11 ),
            new BaseCombatStatInfo(     26,     16,     16,     12,     12 ),
            new BaseCombatStatInfo(     27,     17,     17,     13,     12 ), // 10
            new BaseCombatStatInfo(     30,     18,     18,     14,     14 ),
            new BaseCombatStatInfo(     33,     20,     20,     16,     15 ),
            new BaseCombatStatInfo(     35,     21,     22,     17,     16 ),
            new BaseCombatStatInfo(     38,     24,     24,     18,     17 ),
            new BaseCombatStatInfo(     41,     25,     25,     20,     19 ), // 15
            new BaseCombatStatInfo(     44,     27,     27,     21,     20 ),
            new BaseCombatStatInfo(     47,     28,     29,     23,     22 ),
            new BaseCombatStatInfo(     51,     31,     31,     25,     23 ),
            new BaseCombatStatInfo(     54,     33,     33,     26,     25 ),
            new BaseCombatStatInfo(     56,     35,     35,     27,     26 ), // 20
            new BaseCombatStatInfo(     59,     36,     36,     29,     28 ),
            new BaseCombatStatInfo(     63,     39,     39,     31,     30 ),
            new BaseCombatStatInfo(     66,     40,     41,     32,     30 ),
            new BaseCombatStatInfo(     70,     43,     43,     34,     33 ),
            new BaseCombatStatInfo(     73,     45,     45,     35,     34 ), // 25
            new BaseCombatStatInfo(     76,     46,     47,     37,     36 ),
            new BaseCombatStatInfo(     79,     48,     48,     38,     36 ),
            new BaseCombatStatInfo(     83,     51,     51,     40,     38 ),
            new BaseCombatStatInfo(     86,     53,     53,     42,     40 ),
            new BaseCombatStatInfo(     88,     54,     54,     43,     41 ), // 30
            new BaseCombatStatInfo(     91,     56,     56,     44,     43 ),
            new BaseCombatStatInfo(     94,     57,     58,     46,     43 ),
            new BaseCombatStatInfo(     97,     60,     59,     47,     45 ),
            new BaseCombatStatInfo(    102,     62,     63,     50,     48 ),
            new BaseCombatStatInfo(    105,     64,     64,     51,     49 ), // 35
            new BaseCombatStatInfo(    108,     66,     66,     53,     50 ),
            new BaseCombatStatInfo(    111,     68,     68,     54,     51 ),
            new BaseCombatStatInfo(    114,     69,     70,     55,     53 ),
            new BaseCombatStatInfo(    116,     71,     71,     57,     54 ),
            new BaseCombatStatInfo(    121,     73,     74,     59,     56 ), // 40
            new BaseCombatStatInfo(    123,     75,     76,     60,     57 ),
            new BaseCombatStatInfo(    126,     77,     77,     61,     59 ),
            new BaseCombatStatInfo(    129,     79,     79,     63,     60 ),
            new BaseCombatStatInfo(    132,     80,     81,     64,     62 ),
            new BaseCombatStatInfo(    136,     83,     83,     66,     63 ), // 45
            new BaseCombatStatInfo(    140,     86,     86,     68,     65 ),
            new BaseCombatStatInfo(    143,     87,     88,     70,     67 ),
            new BaseCombatStatInfo(    146,     89,     89,     71,     68 ),
            new BaseCombatStatInfo(    148,     91,     91,     72,     69 ),
            new BaseCombatStatInfo(    151,     93,     93,     74,     70 ), // 50
            new BaseCombatStatInfo(    154,     94,     94,     75,     72 ),
            new BaseCombatStatInfo(    158,     97,     97,     77,     74 ),
            new BaseCombatStatInfo(    161,     98,     99,     78,     75 ),
            new BaseCombatStatInfo(    164,    100,    100,     80,     76 ),
            new BaseCombatStatInfo(    167,    102,    102,     81,     77 ), // 55
            new BaseCombatStatInfo(    171,    105,    105,     83,     80 ),
            new BaseCombatStatInfo(    174,    106,    106,     85,     81 ),
            new BaseCombatStatInfo(    176,    108,    108,     86,     82 ),
            new BaseCombatStatInfo(    179,    109,    110,     87,     83 ),
            new BaseCombatStatInfo(    183,    112,    112,     89,     85 ), // 60
            new BaseCombatStatInfo(    196,    120,    120,     96,     91 ),
            new BaseCombatStatInfo(    208,    127,    128,    102,     97 ),
            new BaseCombatStatInfo(    221,    135,    135,    108,    103 ),
            new BaseCombatStatInfo(    224,    137,    137,    109,    104 ),
            new BaseCombatStatInfo(    228,    139,    140,    111,    106 ), // 65
            new BaseCombatStatInfo(    231,    141,    141,    113,    108 ),
            new BaseCombatStatInfo(    234,    143,    143,    114,    109 ),
            new BaseCombatStatInfo(    236,    145,    145,    115,    110 ),
            new BaseCombatStatInfo(    239,    146,    146,    117,    111 ),
            new BaseCombatStatInfo(    252,    154,    154,    123,    117 ), // 70
            new BaseCombatStatInfo(    259,    158,    158,    126,    121 ),
            new BaseCombatStatInfo(    271,    166,    166,    132,    127 ),
            new BaseCombatStatInfo(    284,    174,    174,    139,    132 ),
            new BaseCombatStatInfo(    287,    175,    175,    140,    134 ),
            new BaseCombatStatInfo(    289,    177,    177,    141,    135 ), // 75
            new BaseCombatStatInfo(    292,    179,    179,    143,    136 ),
            new BaseCombatStatInfo(    296,    181,    181,    145,    138 ),
            new BaseCombatStatInfo(    299,    183,    183,    146,    140 ),
            new BaseCombatStatInfo(    303,    186,    186,    148,    142 ),
            new BaseCombatStatInfo(    309,    189,    189,    151,    144 ), // 80
            new BaseCombatStatInfo(    322,    197,    197,    157,    150 ),
            new BaseCombatStatInfo(    334,    204,    204,    163,    155 ),
            new BaseCombatStatInfo(    341,    208,    209,    167,    159 ),
            new BaseCombatStatInfo(    344,    211,    210,    168,    161 ),
            new BaseCombatStatInfo(    347,    212,    212,    169,    161 ), // 85
            new BaseCombatStatInfo(    359,    220,    220,    175,    168 ),
            new BaseCombatStatInfo(    372,    227,    227,    182,    174 ),
            new BaseCombatStatInfo(    384,    235,    235,    188,    179 ),
            new BaseCombatStatInfo(    397,    242,    243,    194,    185 ),
            new BaseCombatStatInfo(    409,    250,    250,    200,    191 ), // 90
            new BaseCombatStatInfo(    560,    343,    343,    274,    261 ),
            new BaseCombatStatInfo(    662,    405,    405,    324,    309 ),
            new BaseCombatStatInfo(    775,    474,    474,    379,    361 ),
            new BaseCombatStatInfo(    908,    555,    555,    444,    424 ),
            new BaseCombatStatInfo(   1066,    652,    652,    521,    497 ), // 95
            new BaseCombatStatInfo(   1254,    767,    767,    613,    585 ),
            new BaseCombatStatInfo(   1304,    797,    797,    638,    609 ),
            new BaseCombatStatInfo(   1355,    828,    828,    662,    632 ),
            new BaseCombatStatInfo(   1405,    859,    859,    687,    655 ),
            new BaseCombatStatInfo(   1455,    889,    890,    711,    679 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo WarriorClassStats(int Level)
        {
            return _warriorClassStats[Level - 1];
        }
        #endregion

        #region Paladin
        private static readonly List<BaseCombatStatInfo> _paladinClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     17,      5,     11,     12,      9 ),
            new BaseCombatStatInfo(     19,      6,     12,     13,     10 ),
            new BaseCombatStatInfo(     20,      6,     12,     14,     11 ),
            new BaseCombatStatInfo(     21,      7,     13,     15,     11 ),
            new BaseCombatStatInfo(     21,      7,     13,     15,     11 ), // 5
            new BaseCombatStatInfo(     21,      7,     13,     15,     11 ),
            new BaseCombatStatInfo(     23,      7,     14,     16,     12 ),
            new BaseCombatStatInfo(     24,      7,     15,     17,     13 ),
            new BaseCombatStatInfo(     26,      8,     16,     18,     14 ),
            new BaseCombatStatInfo(     27,      9,     17,     19,     14 ), // 10
            new BaseCombatStatInfo(     30,      9,     18,     21,     16 ),
            new BaseCombatStatInfo(     33,     10,     20,     23,     17 ),
            new BaseCombatStatInfo(     35,     11,     22,     25,     19 ),
            new BaseCombatStatInfo(     38,     12,     24,     27,     20 ),
            new BaseCombatStatInfo(     41,     13,     25,     29,     22 ), // 15
            new BaseCombatStatInfo(     44,     14,     27,     31,     23 ),
            new BaseCombatStatInfo(     47,     15,     29,     33,     25 ),
            new BaseCombatStatInfo(     51,     16,     31,     36,     27 ),
            new BaseCombatStatInfo(     54,     17,     33,     38,     29 ),
            new BaseCombatStatInfo(     56,     18,     35,     40,     30 ), // 20
            new BaseCombatStatInfo(     59,     18,     36,     42,     32 ),
            new BaseCombatStatInfo(     63,     20,     39,     45,     34 ),
            new BaseCombatStatInfo(     66,     21,     41,     47,     35 ),
            new BaseCombatStatInfo(     70,     22,     43,     50,     38 ),
            new BaseCombatStatInfo(     73,     23,     45,     52,     39 ), // 25
            new BaseCombatStatInfo(     76,     24,     47,     54,     41 ),
            new BaseCombatStatInfo(     79,     24,     48,     56,     42 ),
            new BaseCombatStatInfo(     83,     26,     51,     59,     44 ),
            new BaseCombatStatInfo(     86,     27,     53,     61,     46 ),
            new BaseCombatStatInfo(     88,     28,     54,     63,     47 ), // 30
            new BaseCombatStatInfo(     91,     29,     56,     65,     49 ),
            new BaseCombatStatInfo(     94,     29,     58,     67,     50 ),
            new BaseCombatStatInfo(     97,     30,     59,     69,     52 ),
            new BaseCombatStatInfo(    102,     32,     63,     73,     55 ),
            new BaseCombatStatInfo(    105,     33,     64,     75,     56 ), // 35
            new BaseCombatStatInfo(    108,     34,     66,     77,     58 ),
            new BaseCombatStatInfo(    111,     35,     68,     79,     59 ),
            new BaseCombatStatInfo(    114,     35,     70,     81,     61 ),
            new BaseCombatStatInfo(    116,     37,     71,     83,     62 ),
            new BaseCombatStatInfo(    121,     38,     74,     86,     65 ), // 40
            new BaseCombatStatInfo(    123,     39,     76,     88,     66 ),
            new BaseCombatStatInfo(    126,     39,     77,     90,     68 ),
            new BaseCombatStatInfo(    129,     40,     79,     92,     69 ),
            new BaseCombatStatInfo(    132,     41,     81,     94,     71 ),
            new BaseCombatStatInfo(    136,     43,     83,     97,     73 ), // 45
            new BaseCombatStatInfo(    140,     44,     86,    100,     75 ),
            new BaseCombatStatInfo(    143,     45,     88,    102,     77 ),
            new BaseCombatStatInfo(    146,     46,     89,    104,     78 ),
            new BaseCombatStatInfo(    148,     46,     91,    106,     80 ),
            new BaseCombatStatInfo(    151,     48,     93,    108,     81 ), // 50
            new BaseCombatStatInfo(    154,     48,     94,    110,     83 ),
            new BaseCombatStatInfo(    158,     50,     97,    113,     85 ),
            new BaseCombatStatInfo(    161,     50,     99,    115,     86 ),
            new BaseCombatStatInfo(    164,     51,    100,    117,     88 ),
            new BaseCombatStatInfo(    167,     52,    102,    119,     89 ), // 55
            new BaseCombatStatInfo(    171,     54,    105,    122,     92 ),
            new BaseCombatStatInfo(    174,     54,    106,    124,     93 ),
            new BaseCombatStatInfo(    176,     55,    108,    126,     95 ),
            new BaseCombatStatInfo(    179,     56,    110,    128,     96 ),
            new BaseCombatStatInfo(    183,     57,    112,    131,     98 ), // 60
            new BaseCombatStatInfo(    196,     61,    120,    140,    105 ),
            new BaseCombatStatInfo(    208,     65,    128,    149,    112 ),
            new BaseCombatStatInfo(    221,     69,    135,    158,    119 ),
            new BaseCombatStatInfo(    224,     70,    137,    160,    120 ),
            new BaseCombatStatInfo(    228,     71,    140,    163,    122 ), // 65
            new BaseCombatStatInfo(    231,     72,    141,    165,    124 ),
            new BaseCombatStatInfo(    234,     73,    143,    167,    125 ),
            new BaseCombatStatInfo(    236,     74,    145,    169,    127 ),
            new BaseCombatStatInfo(    239,     75,    146,    171,    128 ),
            new BaseCombatStatInfo(    252,     79,    154,    180,    135 ), // 70
            new BaseCombatStatInfo(    259,     81,    158,    185,    139 ),
            new BaseCombatStatInfo(    271,     85,    166,    194,    146 ),
            new BaseCombatStatInfo(    284,     89,    174,    203,    152 ),
            new BaseCombatStatInfo(    287,     90,    175,    205,    154 ),
            new BaseCombatStatInfo(    289,     91,    177,    207,    155 ), // 75
            new BaseCombatStatInfo(    292,     91,    179,    209,    157 ),
            new BaseCombatStatInfo(    296,     93,    181,    212,    159 ),
            new BaseCombatStatInfo(    299,     94,    183,    214,    161 ),
            new BaseCombatStatInfo(    303,     95,    186,    217,    163 ),
            new BaseCombatStatInfo(    309,     97,    189,    221,    166 ), // 80
            new BaseCombatStatInfo(    322,    101,    197,    230,    173 ),
            new BaseCombatStatInfo(    334,    105,    204,    239,    179 ),
            new BaseCombatStatInfo(    341,    107,    209,    244,    183 ),
            new BaseCombatStatInfo(    344,    108,    210,    246,    185 ),
            new BaseCombatStatInfo(    347,    108,    212,    248,    186 ), // 85
            new BaseCombatStatInfo(    359,    112,    220,    257,    193 ),
            new BaseCombatStatInfo(    372,    116,    227,    266,    200 ),
            new BaseCombatStatInfo(    384,    120,    235,    275,    206 ),
            new BaseCombatStatInfo(    397,    124,    243,    284,    213 ),
            new BaseCombatStatInfo(    409,    128,    250,    293,    220 ), // 90
            new BaseCombatStatInfo(    560,    176,    343,    401,    301 ),
            new BaseCombatStatInfo(    662,    207,    405,    474,    356 ),
            new BaseCombatStatInfo(    775,    243,    474,    555,    416 ),
            new BaseCombatStatInfo(    908,    284,    555,    650,    488 ),
            new BaseCombatStatInfo(   1066,    334,    652,    763,    572 ), // 95
            new BaseCombatStatInfo(   1254,    393,    767,    898,    674 ),
            new BaseCombatStatInfo(   1304,    408,    797,    934,    701 ),
            new BaseCombatStatInfo(   1355,    424,    828,    970,    728 ),
            new BaseCombatStatInfo(   1405,    440,    859,   1006,    755 ),
            new BaseCombatStatInfo(   1455,    455,    890,   1042,    782 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Paladin and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo PaladinClassStats(int Level)
        {
            return _paladinClassStats[Level - 1];
        }
        #endregion

        #region Hunter
        private static readonly List<BaseCombatStatInfo> _hunterClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     10,     15,     11,     10,      8 ),
            new BaseCombatStatInfo(     12,     17,     12,     11,      9 ),
            new BaseCombatStatInfo(     12,     18,     12,     11,     10 ),
            new BaseCombatStatInfo(     13,     19,     13,     12,     10 ),
            new BaseCombatStatInfo(     13,     19,     13,     12,     10 ), // 5
            new BaseCombatStatInfo(     13,     19,     13,     12,     10 ),
            new BaseCombatStatInfo(     14,     20,     14,     13,     11 ),
            new BaseCombatStatInfo(     15,     21,     15,     14,     12 ),
            new BaseCombatStatInfo(     16,     23,     16,     15,     13 ),
            new BaseCombatStatInfo(     16,     24,     17,     16,     13 ), // 10
            new BaseCombatStatInfo(     18,     26,     18,     17,     15 ),
            new BaseCombatStatInfo(     20,     29,     20,     19,     15 ),
            new BaseCombatStatInfo(     21,     31,     22,     20,     17 ),
            new BaseCombatStatInfo(     23,     34,     24,     22,     18 ),
            new BaseCombatStatInfo(     25,     36,     25,     24,     20 ), // 15
            new BaseCombatStatInfo(     27,     39,     27,     25,     21 ),
            new BaseCombatStatInfo(     29,     41,     29,     27,     23 ),
            new BaseCombatStatInfo(     31,     45,     31,     29,     25 ),
            new BaseCombatStatInfo(     33,     47,     33,     31,     26 ),
            new BaseCombatStatInfo(     34,     50,     35,     33,     27 ), // 20
            new BaseCombatStatInfo(     36,     52,     36,     34,     29 ),
            new BaseCombatStatInfo(     38,     56,     39,     37,     31 ),
            new BaseCombatStatInfo(     40,     58,     41,     38,     32 ),
            new BaseCombatStatInfo(     43,     62,     43,     41,     35 ),
            new BaseCombatStatInfo(     44,     65,     45,     43,     35 ), // 25
            new BaseCombatStatInfo(     46,     67,     47,     44,     37 ),
            new BaseCombatStatInfo(     48,     69,     48,     46,     38 ),
            new BaseCombatStatInfo(     51,     73,     51,     48,     40 ),
            new BaseCombatStatInfo(     52,     76,     53,     50,     42 ),
            new BaseCombatStatInfo(     54,     78,     54,     52,     43 ), // 30
            new BaseCombatStatInfo(     55,     81,     56,     53,     45 ),
            new BaseCombatStatInfo(     57,     83,     58,     55,     45 ),
            new BaseCombatStatInfo(     59,     86,     59,     57,     47 ),
            new BaseCombatStatInfo(     62,     90,     63,     60,     50 ),
            new BaseCombatStatInfo(     64,     93,     64,     61,     51 ), // 35
            new BaseCombatStatInfo(     66,     95,     66,     63,     53 ),
            new BaseCombatStatInfo(     68,     98,     68,     65,     54 ),
            new BaseCombatStatInfo(     69,    100,     70,     66,     55 ),
            new BaseCombatStatInfo(     71,    103,     71,     68,     56 ),
            new BaseCombatStatInfo(     74,    106,     74,     70,     59 ), // 40
            new BaseCombatStatInfo(     75,    109,     76,     72,     60 ),
            new BaseCombatStatInfo(     77,    111,     77,     74,     62 ),
            new BaseCombatStatInfo(     79,    114,     79,     75,     63 ),
            new BaseCombatStatInfo(     80,    116,     81,     77,     65 ),
            new BaseCombatStatInfo(     83,    120,     83,     79,     66 ), // 45
            new BaseCombatStatInfo(     85,    124,     86,     82,     68 ),
            new BaseCombatStatInfo(     87,    126,     88,     84,     70 ),
            new BaseCombatStatInfo(     89,    129,     89,     85,     71 ),
            new BaseCombatStatInfo(     90,    131,     91,     87,     73 ),
            new BaseCombatStatInfo(     92,    134,     93,     88,     74 ), // 50
            new BaseCombatStatInfo(     94,    136,     94,     90,     75 ),
            new BaseCombatStatInfo(     96,    140,     97,     93,     77 ),
            new BaseCombatStatInfo(     98,    142,     99,     94,     78 ),
            new BaseCombatStatInfo(    100,    145,    100,     96,     80 ),
            new BaseCombatStatInfo(    102,    147,    102,     97,     81 ), // 55
            new BaseCombatStatInfo(    104,    151,    105,    100,     84 ),
            new BaseCombatStatInfo(    106,    153,    106,    102,     85 ),
            new BaseCombatStatInfo(    107,    156,    108,    103,     86 ),
            new BaseCombatStatInfo(    109,    158,    110,    105,     87 ),
            new BaseCombatStatInfo(    111,    162,    112,    107,     89 ), // 60
            new BaseCombatStatInfo(    119,    173,    120,    115,     95 ),
            new BaseCombatStatInfo(    127,    184,    128,    122,    102 ),
            new BaseCombatStatInfo(    135,    195,    135,    129,    108 ),
            new BaseCombatStatInfo(    136,    198,    137,    131,    109 ),
            new BaseCombatStatInfo(    139,    201,    140,    134,    111 ), // 65
            new BaseCombatStatInfo(    141,    204,    141,    135,    113 ),
            new BaseCombatStatInfo(    142,    206,    143,    137,    114 ),
            new BaseCombatStatInfo(    144,    209,    145,    138,    115 ),
            new BaseCombatStatInfo(    146,    211,    146,    140,    116 ),
            new BaseCombatStatInfo(    153,    222,    154,    147,    123 ), // 70
            new BaseCombatStatInfo(    158,    228,    158,    152,    126 ),
            new BaseCombatStatInfo(    165,    240,    166,    159,    133 ),
            new BaseCombatStatInfo(    173,    251,    174,    166,    138 ),
            new BaseCombatStatInfo(    175,    253,    175,    168,    140 ),
            new BaseCombatStatInfo(    176,    256,    177,    170,    141 ), // 75
            new BaseCombatStatInfo(    178,    258,    179,    171,    143 ),
            new BaseCombatStatInfo(    180,    262,    181,    174,    145 ),
            new BaseCombatStatInfo(    182,    264,    183,    175,    146 ),
            new BaseCombatStatInfo(    184,    268,    186,    178,    148 ),
            new BaseCombatStatInfo(    188,    273,    189,    181,    151 ), // 80
            new BaseCombatStatInfo(    196,    284,    197,    188,    157 ),
            new BaseCombatStatInfo(    203,    295,    204,    196,    163 ),
            new BaseCombatStatInfo(    208,    301,    209,    200,    166 ),
            new BaseCombatStatInfo(    209,    304,    210,    202,    168 ),
            new BaseCombatStatInfo(    211,    306,    212,    203,    169 ), // 85
            new BaseCombatStatInfo(    219,    317,    220,    211,    175 ),
            new BaseCombatStatInfo(    226,    328,    227,    218,    182 ),
            new BaseCombatStatInfo(    234,    339,    235,    225,    187 ),
            new BaseCombatStatInfo(    242,    350,    243,    233,    194 ),
            new BaseCombatStatInfo(    249,    361,    250,    240,    200 ), // 90
            new BaseCombatStatInfo(    341,    495,    343,    328,    274 ),
            new BaseCombatStatInfo(    403,    585,    405,    388,    324 ),
            new BaseCombatStatInfo(    472,    684,    474,    455,    378 ),
            new BaseCombatStatInfo(    553,    801,    555,    532,    444 ),
            new BaseCombatStatInfo(    649,    941,    652,    625,    520 ), // 95
            new BaseCombatStatInfo(    763,   1107,    767,    736,    613 ),
            new BaseCombatStatInfo(    794,   1151,    797,    765,    637 ),
            new BaseCombatStatInfo(    825,   1196,    828,    795,    662 ),
            new BaseCombatStatInfo(    855,   1240,    859,    824,    686 ),
            new BaseCombatStatInfo(    886,   1284,    890,    854,    711 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Hunter and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo HunterClassStats(int Level)
        {
            return _hunterClassStats[Level - 1];
        }
        #endregion

        #region Rogue
        private static readonly List<BaseCombatStatInfo> _rogueClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     14,     15,     11,      8,      6 ),
            new BaseCombatStatInfo(     16,     17,     12,      9,      7 ),
            new BaseCombatStatInfo(     17,     18,     12,     10,      8 ),
            new BaseCombatStatInfo(     17,     19,     13,     10,      8 ),
            new BaseCombatStatInfo(     17,     19,     13,     10,      8 ), // 5
            new BaseCombatStatInfo(     17,     19,     13,     10,      8 ),
            new BaseCombatStatInfo(     19,     20,     14,     11,      8 ),
            new BaseCombatStatInfo(     20,     21,     15,     12,      9 ),
            new BaseCombatStatInfo(     22,     23,     16,     12,     10 ),
            new BaseCombatStatInfo(     22,     24,     17,     13,     10 ), // 10
            new BaseCombatStatInfo(     25,     26,     18,     14,     11 ),
            new BaseCombatStatInfo(     27,     29,     20,     16,     12 ),
            new BaseCombatStatInfo(     29,     31,     22,     17,     13 ),
            new BaseCombatStatInfo(     31,     34,     24,     18,     14 ),
            new BaseCombatStatInfo(     34,     36,     25,     20,     15 ), // 15
            new BaseCombatStatInfo(     36,     39,     27,     21,     16 ),
            new BaseCombatStatInfo(     39,     41,     29,     23,     17 ),
            new BaseCombatStatInfo(     42,     45,     31,     25,     18 ),
            new BaseCombatStatInfo(     45,     47,     33,     26,     20 ),
            new BaseCombatStatInfo(     46,     50,     35,     27,     20 ), // 20
            new BaseCombatStatInfo(     49,     52,     36,     29,     22 ),
            new BaseCombatStatInfo(     52,     56,     39,     31,     23 ),
            new BaseCombatStatInfo(     55,     58,     41,     32,     24 ),
            new BaseCombatStatInfo(     58,     62,     43,     34,     26 ),
            new BaseCombatStatInfo(     61,     65,     45,     35,     27 ), // 25
            new BaseCombatStatInfo(     63,     67,     47,     37,     28 ),
            new BaseCombatStatInfo(     65,     69,     48,     38,     29 ),
            new BaseCombatStatInfo(     69,     73,     51,     40,     30 ),
            new BaseCombatStatInfo(     71,     76,     53,     42,     31 ),
            new BaseCombatStatInfo(     73,     78,     54,     43,     32 ), // 30
            new BaseCombatStatInfo(     75,     81,     56,     44,     33 ),
            new BaseCombatStatInfo(     78,     83,     58,     46,     34 ),
            new BaseCombatStatInfo(     80,     86,     59,     47,     35 ),
            new BaseCombatStatInfo(     85,     90,     63,     50,     38 ),
            new BaseCombatStatInfo(     87,     93,     64,     51,     38 ), // 35
            new BaseCombatStatInfo(     90,     95,     66,     53,     40 ),
            new BaseCombatStatInfo(     92,     98,     68,     54,     40 ),
            new BaseCombatStatInfo(     94,    100,     70,     55,     42 ),
            new BaseCombatStatInfo(     96,    103,     71,     57,     42 ),
            new BaseCombatStatInfo(    100,    106,     74,     59,     44 ), // 40
            new BaseCombatStatInfo(    102,    109,     76,     60,     45 ),
            new BaseCombatStatInfo(    104,    111,     77,     61,     46 ),
            new BaseCombatStatInfo(    107,    114,     79,     63,     47 ),
            new BaseCombatStatInfo(    109,    116,     81,     64,     48 ),
            new BaseCombatStatInfo(    113,    120,     83,     66,     50 ), // 45
            new BaseCombatStatInfo(    116,    124,     86,     68,     51 ),
            new BaseCombatStatInfo(    119,    126,     88,     70,     53 ),
            new BaseCombatStatInfo(    121,    129,     89,     71,     53 ),
            new BaseCombatStatInfo(    123,    131,     91,     72,     55 ),
            new BaseCombatStatInfo(    125,    134,     93,     74,     55 ), // 50
            new BaseCombatStatInfo(    128,    136,     94,     75,     57 ),
            new BaseCombatStatInfo(    131,    140,     97,     77,     58 ),
            new BaseCombatStatInfo(    133,    142,     99,     78,     59 ),
            new BaseCombatStatInfo(    136,    145,    100,     80,     60 ),
            new BaseCombatStatInfo(    138,    147,    102,     81,     61 ), // 55
            new BaseCombatStatInfo(    142,    151,    105,     83,     63 ),
            new BaseCombatStatInfo(    144,    153,    106,     85,     63 ),
            new BaseCombatStatInfo(    146,    156,    108,     86,     65 ),
            new BaseCombatStatInfo(    148,    158,    110,     87,     65 ),
            new BaseCombatStatInfo(    152,    162,    112,     89,     67 ), // 60
            new BaseCombatStatInfo(    162,    173,    120,     96,     72 ),
            new BaseCombatStatInfo(    172,    184,    128,    102,     76 ),
            new BaseCombatStatInfo(    183,    195,    135,    108,     81 ),
            new BaseCombatStatInfo(    186,    198,    137,    109,     82 ),
            new BaseCombatStatInfo(    189,    201,    140,    111,     83 ), // 65
            new BaseCombatStatInfo(    191,    204,    141,    113,     85 ),
            new BaseCombatStatInfo(    194,    206,    143,    114,     85 ),
            new BaseCombatStatInfo(    196,    209,    145,    115,     87 ),
            new BaseCombatStatInfo(    198,    211,    146,    117,     87 ),
            new BaseCombatStatInfo(    209,    222,    154,    123,     92 ), // 70
            new BaseCombatStatInfo(    215,    228,    158,    126,     95 ),
            new BaseCombatStatInfo(    225,    240,    166,    132,    100 ),
            new BaseCombatStatInfo(    235,    251,    174,    139,    104 ),
            new BaseCombatStatInfo(    238,    253,    175,    140,    105 ),
            new BaseCombatStatInfo(    240,    256,    177,    141,    106 ), // 75
            new BaseCombatStatInfo(    242,    258,    179,    143,    107 ),
            new BaseCombatStatInfo(    245,    262,    181,    145,    108 ),
            new BaseCombatStatInfo(    248,    264,    183,    146,    110 ),
            new BaseCombatStatInfo(    251,    268,    186,    148,    111 ),
            new BaseCombatStatInfo(    256,    273,    189,    151,    113 ), // 80
            new BaseCombatStatInfo(    267,    284,    197,    157,    118 ),
            new BaseCombatStatInfo(    277,    295,    204,    163,    122 ),
            new BaseCombatStatInfo(    283,    301,    209,    167,    125 ),
            new BaseCombatStatInfo(    285,    304,    210,    168,    126 ),
            new BaseCombatStatInfo(    288,    306,    212,    169,    127 ), // 85
            new BaseCombatStatInfo(    298,    317,    220,    175,    132 ),
            new BaseCombatStatInfo(    308,    328,    227,    182,    136 ),
            new BaseCombatStatInfo(    318,    339,    235,    188,    140 ),
            new BaseCombatStatInfo(    329,    350,    243,    194,    145 ),
            new BaseCombatStatInfo(    339,    361,    250,    200,    150 ), // 90
            new BaseCombatStatInfo(    464,    495,    343,    274,    205 ),
            new BaseCombatStatInfo(    549,    585,    405,    324,    243 ),
            new BaseCombatStatInfo(    642,    684,    474,    379,    284 ),
            new BaseCombatStatInfo(    753,    801,    555,    444,    333 ),
            new BaseCombatStatInfo(    884,    941,    652,    521,    390 ), // 95
            new BaseCombatStatInfo(   1039,   1107,    767,    613,    460 ),
            new BaseCombatStatInfo(   1081,   1151,    797,    638,    478 ),
            new BaseCombatStatInfo(   1123,   1196,    828,    662,    496 ),
            new BaseCombatStatInfo(   1165,   1240,    859,    687,    515 ),
            new BaseCombatStatInfo(   1206,   1284,    890,    711,    533 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Rogue and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo RogueClassStats(int Level)
        {
            return _rogueClassStats[Level - 1];
        }
        #endregion

        #region Priest
        private static readonly List<BaseCombatStatInfo> _priestClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     10,     12,     11,     12,      9 ),
            new BaseCombatStatInfo(     11,     14,     12,     13,     10 ),
            new BaseCombatStatInfo(     12,     15,     12,     14,     11 ),
            new BaseCombatStatInfo(     12,     16,     13,     15,     11 ),
            new BaseCombatStatInfo(     12,     16,     13,     15,     11 ), // 5
            new BaseCombatStatInfo(     12,     16,     13,     15,     11 ),
            new BaseCombatStatInfo(     13,     17,     14,     16,     12 ),
            new BaseCombatStatInfo(     14,     17,     15,     17,     13 ),
            new BaseCombatStatInfo(     15,     19,     16,     18,     14 ),
            new BaseCombatStatInfo(     16,     20,     17,     19,     14 ), // 10
            new BaseCombatStatInfo(     17,     22,     18,     21,     16 ),
            new BaseCombatStatInfo(     19,     24,     20,     23,     17 ),
            new BaseCombatStatInfo(     20,     26,     22,     25,     19 ),
            new BaseCombatStatInfo(     22,     28,     24,     27,     20 ),
            new BaseCombatStatInfo(     24,     30,     25,     29,     22 ), // 15
            new BaseCombatStatInfo(     25,     32,     27,     31,     23 ),
            new BaseCombatStatInfo(     27,     34,     29,     33,     25 ),
            new BaseCombatStatInfo(     30,     37,     31,     36,     27 ),
            new BaseCombatStatInfo(     31,     39,     33,     38,     29 ),
            new BaseCombatStatInfo(     32,     42,     35,     40,     30 ), // 20
            new BaseCombatStatInfo(     34,     43,     36,     42,     32 ),
            new BaseCombatStatInfo(     37,     47,     39,     45,     34 ),
            new BaseCombatStatInfo(     38,     48,     41,     47,     35 ),
            new BaseCombatStatInfo(     41,     52,     43,     50,     38 ),
            new BaseCombatStatInfo(     42,     54,     45,     52,     39 ), // 25
            new BaseCombatStatInfo(     44,     56,     47,     54,     41 ),
            new BaseCombatStatInfo(     46,     57,     48,     56,     42 ),
            new BaseCombatStatInfo(     48,     61,     51,     59,     44 ),
            new BaseCombatStatInfo(     50,     63,     53,     61,     46 ),
            new BaseCombatStatInfo(     51,     65,     54,     63,     47 ), // 30
            new BaseCombatStatInfo(     53,     67,     56,     65,     49 ),
            new BaseCombatStatInfo(     54,     69,     58,     67,     50 ),
            new BaseCombatStatInfo(     56,     71,     59,     69,     52 ),
            new BaseCombatStatInfo(     59,     75,     63,     73,     55 ),
            new BaseCombatStatInfo(     61,     77,     64,     75,     56 ), // 35
            new BaseCombatStatInfo(     63,     79,     66,     77,     58 ),
            new BaseCombatStatInfo(     64,     81,     68,     79,     59 ),
            new BaseCombatStatInfo(     66,     83,     70,     81,     61 ),
            new BaseCombatStatInfo(     67,     86,     71,     83,     62 ),
            new BaseCombatStatInfo(     70,     88,     74,     86,     65 ), // 40
            new BaseCombatStatInfo(     71,     91,     76,     88,     66 ),
            new BaseCombatStatInfo(     73,     92,     77,     90,     68 ),
            new BaseCombatStatInfo(     75,     95,     79,     92,     69 ),
            new BaseCombatStatInfo(     76,     96,     81,     94,     71 ),
            new BaseCombatStatInfo(     79,    100,     83,     97,     73 ), // 45
            new BaseCombatStatInfo(     81,    103,     86,    100,     75 ),
            new BaseCombatStatInfo(     83,    105,     88,    102,     77 ),
            new BaseCombatStatInfo(     85,    107,     89,    104,     78 ),
            new BaseCombatStatInfo(     86,    109,     91,    106,     80 ),
            new BaseCombatStatInfo(     87,    111,     93,    108,     81 ), // 50
            new BaseCombatStatInfo(     89,    113,     94,    110,     83 ),
            new BaseCombatStatInfo(     92,    116,     97,    113,     85 ),
            new BaseCombatStatInfo(     93,    118,     99,    115,     86 ),
            new BaseCombatStatInfo(     95,    120,    100,    117,     88 ),
            new BaseCombatStatInfo(     97,    122,    102,    119,     89 ), // 55
            new BaseCombatStatInfo(     99,    125,    105,    122,     92 ),
            new BaseCombatStatInfo(    101,    127,    106,    124,     93 ),
            new BaseCombatStatInfo(    102,    130,    108,    126,     95 ),
            new BaseCombatStatInfo(    104,    131,    110,    128,     96 ),
            new BaseCombatStatInfo(    106,    135,    112,    131,     98 ), // 60
            new BaseCombatStatInfo(    114,    144,    120,    140,    105 ),
            new BaseCombatStatInfo(    121,    153,    128,    149,    112 ),
            new BaseCombatStatInfo(    128,    162,    135,    158,    119 ),
            new BaseCombatStatInfo(    130,    165,    137,    160,    120 ),
            new BaseCombatStatInfo(    132,    167,    140,    163,    122 ), // 65
            new BaseCombatStatInfo(    134,    170,    141,    165,    124 ),
            new BaseCombatStatInfo(    136,    171,    143,    167,    125 ),
            new BaseCombatStatInfo(    137,    174,    145,    169,    127 ),
            new BaseCombatStatInfo(    138,    175,    146,    171,    128 ),
            new BaseCombatStatInfo(    146,    184,    154,    180,    135 ), // 70
            new BaseCombatStatInfo(    150,    189,    158,    185,    139 ),
            new BaseCombatStatInfo(    157,    199,    166,    194,    146 ),
            new BaseCombatStatInfo(    165,    209,    174,    203,    152 ),
            new BaseCombatStatInfo(    166,    210,    175,    205,    154 ),
            new BaseCombatStatInfo(    167,    213,    177,    207,    155 ), // 75
            new BaseCombatStatInfo(    169,    214,    179,    209,    157 ),
            new BaseCombatStatInfo(    172,    218,    181,    212,    159 ),
            new BaseCombatStatInfo(    173,    219,    183,    214,    161 ),
            new BaseCombatStatInfo(    176,    223,    186,    217,    163 ),
            new BaseCombatStatInfo(    179,    227,    189,    221,    166 ), // 80
            new BaseCombatStatInfo(    187,    236,    197,    230,    173 ),
            new BaseCombatStatInfo(    194,    245,    204,    239,    179 ),
            new BaseCombatStatInfo(    198,    250,    209,    244,    183 ),
            new BaseCombatStatInfo(    199,    253,    210,    246,    185 ),
            new BaseCombatStatInfo(    201,    254,    212,    248,    186 ), // 85
            new BaseCombatStatInfo(    208,    263,    220,    257,    193 ),
            new BaseCombatStatInfo(    216,    273,    227,    266,    200 ),
            new BaseCombatStatInfo(    223,    282,    235,    275,    206 ),
            new BaseCombatStatInfo(    230,    291,    243,    284,    213 ),
            new BaseCombatStatInfo(    237,    300,    250,    293,    220 ), // 90
            new BaseCombatStatInfo(    324,    411,    343,    401,    301 ),
            new BaseCombatStatInfo(    384,    486,    405,    474,    356 ),
            new BaseCombatStatInfo(    449,    568,    474,    555,    416 ),
            new BaseCombatStatInfo(    526,    666,    555,    650,    488 ),
            new BaseCombatStatInfo(    618,    782,    652,    763,    572 ), // 95
            new BaseCombatStatInfo(    727,    920,    767,    898,    674 ),
            new BaseCombatStatInfo(    756,    957,    797,    934,    701 ),
            new BaseCombatStatInfo(    785,    994,    828,    970,    728 ),
            new BaseCombatStatInfo(    814,   1030,    859,   1006,    755 ),
            new BaseCombatStatInfo(    843,   1067,    890,   1042,    782 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Priest and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo PriestClassStats(int Level)
        {
            return _priestClassStats[Level - 1];
        }
        #endregion

        #region Death Knight
        private static readonly List<BaseCombatStatInfo> _deathKnightClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(     17,     13,     11,      7,      7 ),
            new BaseCombatStatInfo(     19,     14,     12,      7,      8 ),
            new BaseCombatStatInfo(     20,     15,     12,      8,      9 ),
            new BaseCombatStatInfo(     21,     16,     13,      8,      9 ),
            new BaseCombatStatInfo(     21,     16,     13,      8,      9 ), // 5
            new BaseCombatStatInfo(     21,     16,     13,      8,      9 ),
            new BaseCombatStatInfo(     23,     17,     14,      9,     10 ),
            new BaseCombatStatInfo(     24,     18,     15,      9,     11 ),
            new BaseCombatStatInfo(     26,     19,     16,     10,     11 ),
            new BaseCombatStatInfo(     27,     20,     17,     10,     11 ), // 10
            new BaseCombatStatInfo(     30,     22,     18,     11,     13 ),
            new BaseCombatStatInfo(     33,     24,     20,     13,     14 ),
            new BaseCombatStatInfo(     35,     26,     22,     14,     16 ),
            new BaseCombatStatInfo(     38,     28,     24,     15,     16 ),
            new BaseCombatStatInfo(     41,     30,     25,     16,     18 ), // 15
            new BaseCombatStatInfo(     44,     33,     27,     17,     19 ),
            new BaseCombatStatInfo(     47,     34,     29,     18,     20 ),
            new BaseCombatStatInfo(     51,     38,     31,     20,     22 ),
            new BaseCombatStatInfo(     54,     39,     33,     21,     24 ),
            new BaseCombatStatInfo(     56,     42,     35,     22,     25 ), // 20
            new BaseCombatStatInfo(     59,     43,     36,     23,     26 ),
            new BaseCombatStatInfo(     63,     47,     39,     25,     28 ),
            new BaseCombatStatInfo(     66,     48,     41,     26,     29 ),
            new BaseCombatStatInfo(     70,     52,     43,     27,     31 ),
            new BaseCombatStatInfo(     73,     54,     45,     28,     32 ), // 25
            new BaseCombatStatInfo(     76,     56,     47,     29,     34 ),
            new BaseCombatStatInfo(     79,     58,     48,     31,     34 ),
            new BaseCombatStatInfo(     83,     61,     51,     32,     36 ),
            new BaseCombatStatInfo(     86,     63,     53,     33,     38 ),
            new BaseCombatStatInfo(     88,     65,     54,     34,     38 ), // 30
            new BaseCombatStatInfo(     91,     68,     56,     35,     40 ),
            new BaseCombatStatInfo(     94,     69,     58,     37,     41 ),
            new BaseCombatStatInfo(     97,     72,     59,     38,     43 ),
            new BaseCombatStatInfo(    102,     75,     63,     40,     45 ),
            new BaseCombatStatInfo(    105,     78,     64,     41,     46 ), // 35
            new BaseCombatStatInfo(    108,     79,     66,     42,     47 ),
            new BaseCombatStatInfo(    111,     82,     68,     43,     48 ),
            new BaseCombatStatInfo(    114,     83,     70,     44,     50 ),
            new BaseCombatStatInfo(    116,     86,     71,     45,     51 ),
            new BaseCombatStatInfo(    121,     88,     74,     47,     53 ), // 40
            new BaseCombatStatInfo(    123,     91,     76,     48,     54 ),
            new BaseCombatStatInfo(    126,     93,     77,     49,     56 ),
            new BaseCombatStatInfo(    129,     95,     79,     50,     56 ),
            new BaseCombatStatInfo(    132,     97,     81,     51,     58 ),
            new BaseCombatStatInfo(    136,    100,     83,     53,     60 ), // 45
            new BaseCombatStatInfo(    140,    103,     86,     55,     61 ),
            new BaseCombatStatInfo(    143,    105,     88,     56,     63 ),
            new BaseCombatStatInfo(    146,    108,     89,     57,     64 ),
            new BaseCombatStatInfo(    148,    109,     91,     58,     65 ),
            new BaseCombatStatInfo(    151,    112,     93,     59,     66 ), // 50
            new BaseCombatStatInfo(    154,    113,     94,     60,     68 ),
            new BaseCombatStatInfo(    158,    117,     97,     62,     70 ),
            new BaseCombatStatInfo(    161,    118,     99,     63,     70 ),
            new BaseCombatStatInfo(    164,    121,    100,     64,     72 ),
            new BaseCombatStatInfo(    167,    123,    102,     65,     73 ), // 55
            new BaseCombatStatInfo(    171,    126,    105,     67,     75 ),
            new BaseCombatStatInfo(    174,    128,    106,     68,     76 ),
            new BaseCombatStatInfo(    176,    130,    108,     69,     78 ),
            new BaseCombatStatInfo(    179,    132,    110,     70,     79 ),
            new BaseCombatStatInfo(    183,    135,    112,     72,     80 ), // 60
            new BaseCombatStatInfo(    196,    144,    120,     76,     86 ),
            new BaseCombatStatInfo(    208,    153,    128,     81,     92 ),
            new BaseCombatStatInfo(    221,    163,    135,     86,     97 ),
            new BaseCombatStatInfo(    224,    165,    137,     87,     98 ),
            new BaseCombatStatInfo(    228,    168,    140,     89,    100 ), // 65
            new BaseCombatStatInfo(    231,    170,    141,     90,    101 ),
            new BaseCombatStatInfo(    234,    172,    143,     91,    102 ),
            new BaseCombatStatInfo(    236,    174,    145,     92,    104 ),
            new BaseCombatStatInfo(    239,    176,    146,     93,    105 ),
            new BaseCombatStatInfo(    252,    185,    154,     98,    110 ), // 70
            new BaseCombatStatInfo(    259,    190,    158,    101,    114 ),
            new BaseCombatStatInfo(    271,    200,    166,    106,    119 ),
            new BaseCombatStatInfo(    284,    209,    174,    111,    124 ),
            new BaseCombatStatInfo(    287,    211,    175,    112,    126 ),
            new BaseCombatStatInfo(    289,    213,    177,    113,    127 ), // 75
            new BaseCombatStatInfo(    292,    215,    179,    114,    128 ),
            new BaseCombatStatInfo(    296,    218,    181,    116,    130 ),
            new BaseCombatStatInfo(    299,    220,    183,    117,    132 ),
            new BaseCombatStatInfo(    303,    223,    186,    118,    133 ),
            new BaseCombatStatInfo(    309,    228,    189,    121,    136 ), // 80
            new BaseCombatStatInfo(    322,    237,    197,    126,    142 ),
            new BaseCombatStatInfo(    334,    246,    204,    131,    146 ),
            new BaseCombatStatInfo(    341,    251,    209,    133,    150 ),
            new BaseCombatStatInfo(    344,    253,    210,    134,    151 ),
            new BaseCombatStatInfo(    347,    255,    212,    135,    152 ), // 85
            new BaseCombatStatInfo(    359,    264,    220,    140,    158 ),
            new BaseCombatStatInfo(    372,    273,    227,    145,    164 ),
            new BaseCombatStatInfo(    384,    283,    235,    150,    169 ),
            new BaseCombatStatInfo(    397,    292,    243,    155,    174 ),
            new BaseCombatStatInfo(    409,    301,    250,    160,    180 ), // 90
            new BaseCombatStatInfo(    560,    413,    343,    219,    246 ),
            new BaseCombatStatInfo(    662,    488,    405,    259,    291 ),
            new BaseCombatStatInfo(    775,    570,    474,    303,    340 ),
            new BaseCombatStatInfo(    908,    668,    555,    355,    399 ),
            new BaseCombatStatInfo(   1066,    785,    652,    417,    468 ), // 95
            new BaseCombatStatInfo(   1254,    923,    767,    490,    551 ),
            new BaseCombatStatInfo(   1304,    960,    797,    510,    574 ),
            new BaseCombatStatInfo(   1355,    997,    828,    530,    596 ),
            new BaseCombatStatInfo(   1405,   1034,    859,    549,    618 ),
            new BaseCombatStatInfo(   1455,   1071,    890,    569,    640 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Death Knight and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo DeathKnightClassStats(int Level)
        {
            return _deathKnightClassStats[Level - 1];
        }
        #endregion

        #region Shaman
        private static readonly List<BaseCombatStatInfo> _shamanClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(      7,     15,     11,     12,      9 ),
            new BaseCombatStatInfo(      8,     17,     12,     13,     10 ),
            new BaseCombatStatInfo(      9,     18,     12,     14,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ), // 5
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(     10,     20,     14,     16,     12 ),
            new BaseCombatStatInfo(     10,     21,     15,     17,     13 ),
            new BaseCombatStatInfo(     11,     23,     16,     18,     14 ),
            new BaseCombatStatInfo(     12,     24,     17,     19,     14 ), // 10
            new BaseCombatStatInfo(     13,     26,     18,     21,     16 ),
            new BaseCombatStatInfo(     14,     29,     20,     23,     17 ),
            new BaseCombatStatInfo(     15,     31,     22,     25,     19 ),
            new BaseCombatStatInfo(     16,     34,     24,     27,     20 ),
            new BaseCombatStatInfo(     18,     36,     25,     29,     22 ), // 15
            new BaseCombatStatInfo(     19,     39,     27,     31,     23 ),
            new BaseCombatStatInfo(     20,     41,     29,     33,     25 ),
            new BaseCombatStatInfo(     22,     45,     31,     36,     27 ),
            new BaseCombatStatInfo(     23,     47,     33,     38,     29 ),
            new BaseCombatStatInfo(     24,     50,     35,     40,     30 ), // 20
            new BaseCombatStatInfo(     25,     52,     36,     42,     32 ),
            new BaseCombatStatInfo(     27,     56,     39,     45,     34 ),
            new BaseCombatStatInfo(     28,     58,     41,     47,     35 ),
            new BaseCombatStatInfo(     30,     62,     43,     50,     38 ),
            new BaseCombatStatInfo(     31,     65,     45,     52,     39 ), // 25
            new BaseCombatStatInfo(     33,     67,     47,     54,     41 ),
            new BaseCombatStatInfo(     34,     69,     48,     56,     42 ),
            new BaseCombatStatInfo(     36,     73,     51,     59,     44 ),
            new BaseCombatStatInfo(     37,     76,     53,     61,     46 ),
            new BaseCombatStatInfo(     38,     78,     54,     63,     47 ), // 30
            new BaseCombatStatInfo(     39,     81,     56,     65,     49 ),
            new BaseCombatStatInfo(     40,     83,     58,     67,     50 ),
            new BaseCombatStatInfo(     42,     86,     59,     69,     52 ),
            new BaseCombatStatInfo(     44,     90,     63,     73,     55 ),
            new BaseCombatStatInfo(     45,     93,     64,     75,     56 ), // 35
            new BaseCombatStatInfo(     46,     95,     66,     77,     58 ),
            new BaseCombatStatInfo(     48,     98,     68,     79,     59 ),
            new BaseCombatStatInfo(     49,    100,     70,     81,     61 ),
            new BaseCombatStatInfo(     50,    103,     71,     83,     62 ),
            new BaseCombatStatInfo(     52,    106,     74,     86,     65 ), // 40
            new BaseCombatStatInfo(     53,    109,     76,     88,     66 ),
            new BaseCombatStatInfo(     54,    111,     77,     90,     68 ),
            new BaseCombatStatInfo(     56,    114,     79,     92,     69 ),
            new BaseCombatStatInfo(     57,    116,     81,     94,     71 ),
            new BaseCombatStatInfo(     59,    120,     83,     97,     73 ), // 45
            new BaseCombatStatInfo(     60,    124,     86,    100,     75 ),
            new BaseCombatStatInfo(     62,    126,     88,    102,     77 ),
            new BaseCombatStatInfo(     63,    129,     89,    104,     78 ),
            new BaseCombatStatInfo(     64,    131,     91,    106,     80 ),
            new BaseCombatStatInfo(     65,    134,     93,    108,     81 ), // 50
            new BaseCombatStatInfo(     66,    136,     94,    110,     83 ),
            new BaseCombatStatInfo(     68,    140,     97,    113,     85 ),
            new BaseCombatStatInfo(     69,    142,     99,    115,     86 ),
            new BaseCombatStatInfo(     71,    145,    100,    117,     88 ),
            new BaseCombatStatInfo(     72,    147,    102,    119,     89 ), // 55
            new BaseCombatStatInfo(     74,    151,    105,    122,     92 ),
            new BaseCombatStatInfo(     75,    153,    106,    124,     93 ),
            new BaseCombatStatInfo(     76,    156,    108,    126,     95 ),
            new BaseCombatStatInfo(     77,    158,    110,    128,     96 ),
            new BaseCombatStatInfo(     79,    162,    112,    131,     98 ), // 60
            new BaseCombatStatInfo(     84,    173,    120,    140,    105 ),
            new BaseCombatStatInfo(     90,    184,    128,    149,    112 ),
            new BaseCombatStatInfo(     95,    195,    135,    158,    119 ),
            new BaseCombatStatInfo(     96,    198,    137,    160,    120 ),
            new BaseCombatStatInfo(     98,    201,    140,    163,    122 ), // 65
            new BaseCombatStatInfo(     99,    204,    141,    165,    124 ),
            new BaseCombatStatInfo(    101,    206,    143,    167,    125 ),
            new BaseCombatStatInfo(    102,    209,    145,    169,    127 ),
            new BaseCombatStatInfo(    103,    211,    146,    171,    128 ),
            new BaseCombatStatInfo(    108,    222,    154,    180,    135 ), // 70
            new BaseCombatStatInfo(    111,    228,    158,    185,    139 ),
            new BaseCombatStatInfo(    117,    240,    166,    194,    146 ),
            new BaseCombatStatInfo(    122,    251,    174,    203,    152 ),
            new BaseCombatStatInfo(    124,    253,    175,    205,    154 ),
            new BaseCombatStatInfo(    124,    256,    177,    207,    155 ), // 75
            new BaseCombatStatInfo(    126,    258,    179,    209,    157 ),
            new BaseCombatStatInfo(    127,    262,    181,    212,    159 ),
            new BaseCombatStatInfo(    129,    264,    183,    214,    161 ),
            new BaseCombatStatInfo(    130,    268,    186,    217,    163 ),
            new BaseCombatStatInfo(    133,    273,    189,    221,    166 ), // 80
            new BaseCombatStatInfo(    139,    284,    197,    230,    173 ),
            new BaseCombatStatInfo(    144,    295,    204,    239,    179 ),
            new BaseCombatStatInfo(    147,    301,    209,    244,    183 ),
            new BaseCombatStatInfo(    148,    304,    210,    246,    185 ),
            new BaseCombatStatInfo(    149,    306,    212,    248,    186 ), // 85
            new BaseCombatStatInfo(    154,    317,    220,    257,    193 ),
            new BaseCombatStatInfo(    160,    328,    227,    266,    200 ),
            new BaseCombatStatInfo(    165,    339,    235,    275,    206 ),
            new BaseCombatStatInfo(    171,    350,    243,    284,    213 ),
            new BaseCombatStatInfo(    176,    361,    250,    293,    220 ), // 90
            new BaseCombatStatInfo(    241,    495,    343,    401,    301 ),
            new BaseCombatStatInfo(    285,    585,    405,    474,    356 ),
            new BaseCombatStatInfo(    333,    684,    474,    555,    416 ),
            new BaseCombatStatInfo(    391,    801,    555,    650,    488 ),
            new BaseCombatStatInfo(    459,    941,    652,    763,    572 ), // 95
            new BaseCombatStatInfo(    540,   1107,    767,    898,    674 ),
            new BaseCombatStatInfo(    561,   1151,    797,    934,    701 ),
            new BaseCombatStatInfo(    583,   1196,    828,    970,    728 ),
            new BaseCombatStatInfo(    605,   1240,    859,   1006,    755 ),
            new BaseCombatStatInfo(    626,   1284,    890,   1042,    782 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Shaman and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo ShamanClassStats(int Level)
        {
            return _shamanClassStats[Level - 1];
        }
        #endregion

        #region Mage
        private static readonly List<BaseCombatStatInfo> _mageClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(      8,     10,     11,     12,     13 ),
            new BaseCombatStatInfo(      8,     12,     12,     13,     15 ),
            new BaseCombatStatInfo(      9,     12,     12,     14,     16 ),
            new BaseCombatStatInfo(      9,     13,     13,     15,     16 ),
            new BaseCombatStatInfo(      9,     13,     13,     15,     16 ), // 5
            new BaseCombatStatInfo(      9,     13,     13,     15,     16 ),
            new BaseCombatStatInfo(     10,     14,     14,     16,     18 ),
            new BaseCombatStatInfo(     11,     15,     15,     17,     19 ),
            new BaseCombatStatInfo(     12,     16,     16,     18,     21 ),
            new BaseCombatStatInfo(     12,     17,     17,     19,     21 ), // 10
            new BaseCombatStatInfo(     13,     18,     18,     21,     24 ),
            new BaseCombatStatInfo(     15,     20,     20,     23,     25 ),
            new BaseCombatStatInfo(     16,     21,     22,     25,     28 ),
            new BaseCombatStatInfo(     17,     24,     24,     27,     30 ),
            new BaseCombatStatInfo(     18,     25,     25,     29,     33 ), // 15
            new BaseCombatStatInfo(     20,     27,     27,     31,     34 ),
            new BaseCombatStatInfo(     21,     28,     29,     33,     37 ),
            new BaseCombatStatInfo(     23,     31,     31,     36,     40 ),
            new BaseCombatStatInfo(     24,     33,     33,     38,     43 ),
            new BaseCombatStatInfo(     25,     35,     35,     40,     44 ), // 20
            new BaseCombatStatInfo(     26,     36,     36,     42,     47 ),
            new BaseCombatStatInfo(     28,     39,     39,     45,     50 ),
            new BaseCombatStatInfo(     29,     40,     41,     47,     52 ),
            new BaseCombatStatInfo(     31,     43,     43,     50,     56 ),
            new BaseCombatStatInfo(     32,     45,     45,     52,     58 ), // 25
            new BaseCombatStatInfo(     34,     46,     47,     54,     61 ),
            new BaseCombatStatInfo(     35,     48,     48,     56,     62 ),
            new BaseCombatStatInfo(     37,     51,     51,     59,     65 ),
            new BaseCombatStatInfo(     38,     53,     53,     61,     68 ),
            new BaseCombatStatInfo(     39,     54,     54,     63,     69 ), // 30
            new BaseCombatStatInfo(     40,     56,     56,     65,     72 ),
            new BaseCombatStatInfo(     42,     57,     58,     67,     74 ),
            new BaseCombatStatInfo(     43,     60,     59,     69,     77 ),
            new BaseCombatStatInfo(     45,     62,     63,     73,     81 ),
            new BaseCombatStatInfo(     47,     64,     64,     75,     83 ), // 35
            new BaseCombatStatInfo(     48,     66,     66,     77,     86 ),
            new BaseCombatStatInfo(     49,     68,     68,     79,     87 ),
            new BaseCombatStatInfo(     51,     69,     70,     81,     90 ),
            new BaseCombatStatInfo(     52,     71,     71,     83,     92 ),
            new BaseCombatStatInfo(     54,     73,     74,     86,     96 ), // 40
            new BaseCombatStatInfo(     55,     75,     76,     88,     98 ),
            new BaseCombatStatInfo(     56,     77,     77,     90,    100 ),
            new BaseCombatStatInfo(     57,     79,     79,     92,    102 ),
            new BaseCombatStatInfo(     59,     80,     81,     94,    105 ),
            new BaseCombatStatInfo(     61,     83,     83,     97,    108 ), // 45
            new BaseCombatStatInfo(     62,     86,     86,    100,    111 ),
            new BaseCombatStatInfo(     64,     87,     88,    102,    114 ),
            new BaseCombatStatInfo(     65,     89,     89,    104,    115 ),
            new BaseCombatStatInfo(     66,     91,     91,    106,    118 ),
            new BaseCombatStatInfo(     67,     93,     93,    108,    120 ), // 50
            new BaseCombatStatInfo(     69,     94,     94,    110,    123 ),
            new BaseCombatStatInfo(     70,     97,     97,    113,    126 ),
            new BaseCombatStatInfo(     72,     98,     99,    115,    127 ),
            new BaseCombatStatInfo(     73,    100,    100,    117,    130 ),
            new BaseCombatStatInfo(     74,    102,    102,    119,    131 ), // 55
            new BaseCombatStatInfo(     76,    105,    105,    122,    136 ),
            new BaseCombatStatInfo(     77,    106,    106,    124,    137 ),
            new BaseCombatStatInfo(     78,    108,    108,    126,    140 ),
            new BaseCombatStatInfo(     80,    109,    110,    128,    142 ),
            new BaseCombatStatInfo(     81,    112,    112,    131,    145 ), // 60
            new BaseCombatStatInfo(     87,    120,    120,    140,    155 ),
            new BaseCombatStatInfo(     93,    127,    128,    149,    165 ),
            new BaseCombatStatInfo(     98,    135,    135,    158,    176 ),
            new BaseCombatStatInfo(    100,    137,    137,    160,    177 ),
            new BaseCombatStatInfo(    101,    139,    140,    163,    180 ), // 65
            new BaseCombatStatInfo(    103,    141,    141,    165,    183 ),
            new BaseCombatStatInfo(    104,    143,    143,    167,    185 ),
            new BaseCombatStatInfo(    105,    145,    145,    169,    188 ),
            new BaseCombatStatInfo(    106,    146,    146,    171,    189 ),
            new BaseCombatStatInfo(    112,    154,    154,    180,    199 ), // 70
            new BaseCombatStatInfo(    115,    158,    158,    185,    205 ),
            new BaseCombatStatInfo(    121,    166,    166,    194,    216 ),
            new BaseCombatStatInfo(    126,    174,    174,    203,    225 ),
            new BaseCombatStatInfo(    128,    175,    175,    205,    228 ),
            new BaseCombatStatInfo(    129,    177,    177,    207,    229 ), // 75
            new BaseCombatStatInfo(    130,    179,    179,    209,    232 ),
            new BaseCombatStatInfo(    132,    181,    181,    212,    235 ),
            new BaseCombatStatInfo(    133,    183,    183,    214,    238 ),
            new BaseCombatStatInfo(    135,    186,    186,    217,    241 ),
            new BaseCombatStatInfo(    138,    189,    189,    221,    245 ), // 80
            new BaseCombatStatInfo(    143,    197,    197,    230,    256 ),
            new BaseCombatStatInfo(    149,    204,    204,    239,    264 ),
            new BaseCombatStatInfo(    152,    208,    209,    244,    270 ),
            new BaseCombatStatInfo(    153,    211,    210,    246,    273 ),
            new BaseCombatStatInfo(    154,    212,    212,    248,    275 ), // 85
            new BaseCombatStatInfo(    160,    220,    220,    257,    285 ),
            new BaseCombatStatInfo(    166,    227,    227,    266,    295 ),
            new BaseCombatStatInfo(    171,    235,    235,    275,    304 ),
            new BaseCombatStatInfo(    177,    242,    243,    284,    315 ),
            new BaseCombatStatInfo(    182,    250,    250,    293,    325 ), // 90
            new BaseCombatStatInfo(    249,    343,    343,    401,    445 ),
            new BaseCombatStatInfo(    295,    405,    405,    474,    526 ),
            new BaseCombatStatInfo(    345,    474,    474,    555,    615 ),
            new BaseCombatStatInfo(    404,    555,    555,    650,    721 ),
            new BaseCombatStatInfo(    474,    652,    652,    763,    845 ), // 95
            new BaseCombatStatInfo(    558,    767,    767,    898,    996 ),
            new BaseCombatStatInfo(    580,    797,    797,    934,   1036 ),
            new BaseCombatStatInfo(    603,    828,    828,    970,   1075 ),
            new BaseCombatStatInfo(    625,    859,    859,   1006,   1115 ),
            new BaseCombatStatInfo(    647,    889,    890,   1042,   1155 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Mage and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo MageClassStats(int Level)
        {
            return _mageClassStats[Level - 1];
        }
        #endregion

        #region Warlock
        private static readonly List<BaseCombatStatInfo> _warlockClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(      6,     12,     11,     12,     13 ),
            new BaseCombatStatInfo(      7,     13,     12,     13,     15 ),
            new BaseCombatStatInfo(      8,     14,     12,     14,     16 ),
            new BaseCombatStatInfo(      8,     15,     13,     15,     16 ),
            new BaseCombatStatInfo(      8,     15,     13,     15,     16 ), // 5
            new BaseCombatStatInfo(      8,     15,     13,     15,     16 ),
            new BaseCombatStatInfo(      9,     15,     14,     16,     18 ),
            new BaseCombatStatInfo(      9,     16,     15,     17,     19 ),
            new BaseCombatStatInfo(     10,     18,     16,     18,     21 ),
            new BaseCombatStatInfo(     10,     18,     17,     19,     21 ), // 10
            new BaseCombatStatInfo(     11,     20,     18,     21,     24 ),
            new BaseCombatStatInfo(     13,     22,     20,     23,     25 ),
            new BaseCombatStatInfo(     13,     24,     22,     25,     28 ),
            new BaseCombatStatInfo(     14,     26,     24,     27,     30 ),
            new BaseCombatStatInfo(     16,     28,     25,     29,     33 ), // 15
            new BaseCombatStatInfo(     17,     30,     27,     31,     34 ),
            new BaseCombatStatInfo(     18,     31,     29,     33,     37 ),
            new BaseCombatStatInfo(     19,     35,     31,     36,     40 ),
            new BaseCombatStatInfo(     20,     36,     33,     38,     43 ),
            new BaseCombatStatInfo(     21,     38,     35,     40,     44 ), // 20
            new BaseCombatStatInfo(     22,     40,     36,     42,     47 ),
            new BaseCombatStatInfo(     24,     43,     39,     45,     50 ),
            new BaseCombatStatInfo(     25,     45,     41,     47,     52 ),
            new BaseCombatStatInfo(     27,     48,     43,     50,     56 ),
            new BaseCombatStatInfo(     28,     50,     45,     52,     58 ), // 25
            new BaseCombatStatInfo(     29,     51,     47,     54,     61 ),
            new BaseCombatStatInfo(     30,     53,     48,     56,     62 ),
            new BaseCombatStatInfo(     31,     56,     51,     59,     65 ),
            new BaseCombatStatInfo(     33,     58,     53,     61,     68 ),
            new BaseCombatStatInfo(     33,     60,     54,     63,     69 ), // 30
            new BaseCombatStatInfo(     34,     62,     56,     65,     72 ),
            new BaseCombatStatInfo(     36,     64,     58,     67,     74 ),
            new BaseCombatStatInfo(     37,     66,     59,     69,     77 ),
            new BaseCombatStatInfo(     39,     69,     63,     73,     81 ),
            new BaseCombatStatInfo(     40,     71,     64,     75,     83 ), // 35
            new BaseCombatStatInfo(     41,     73,     66,     77,     86 ),
            new BaseCombatStatInfo(     42,     75,     68,     79,     87 ),
            new BaseCombatStatInfo(     43,     77,     70,     81,     90 ),
            new BaseCombatStatInfo(     44,     79,     71,     83,     92 ),
            new BaseCombatStatInfo(     46,     81,     74,     86,     96 ), // 40
            new BaseCombatStatInfo(     47,     84,     76,     88,     98 ),
            new BaseCombatStatInfo(     48,     85,     77,     90,    100 ),
            new BaseCombatStatInfo(     49,     87,     79,     92,    102 ),
            new BaseCombatStatInfo(     50,     89,     81,     94,    105 ),
            new BaseCombatStatInfo(     52,     92,     83,     97,    108 ), // 45
            new BaseCombatStatInfo(     53,     95,     86,    100,    111 ),
            new BaseCombatStatInfo(     54,     97,     88,    102,    114 ),
            new BaseCombatStatInfo(     55,     99,     89,    104,    115 ),
            new BaseCombatStatInfo(     56,    101,     91,    106,    118 ),
            new BaseCombatStatInfo(     57,    103,     93,    108,    120 ), // 50
            new BaseCombatStatInfo(     58,    104,     94,    110,    123 ),
            new BaseCombatStatInfo(     60,    107,     97,    113,    126 ),
            new BaseCombatStatInfo(     61,    109,     99,    115,    127 ),
            new BaseCombatStatInfo(     62,    111,    100,    117,    130 ),
            new BaseCombatStatInfo(     63,    113,    102,    119,    131 ), // 55
            new BaseCombatStatInfo(     65,    116,    105,    122,    136 ),
            new BaseCombatStatInfo(     66,    117,    106,    124,    137 ),
            new BaseCombatStatInfo(     67,    120,    108,    126,    140 ),
            new BaseCombatStatInfo(     68,    121,    110,    128,    142 ),
            new BaseCombatStatInfo(     69,    124,    112,    131,    145 ), // 60
            new BaseCombatStatInfo(     74,    133,    120,    140,    155 ),
            new BaseCombatStatInfo(     79,    141,    128,    149,    165 ),
            new BaseCombatStatInfo(     84,    150,    135,    158,    176 ),
            new BaseCombatStatInfo(     85,    152,    137,    160,    177 ),
            new BaseCombatStatInfo(     86,    154,    140,    163,    180 ), // 65
            new BaseCombatStatInfo(     88,    157,    141,    165,    183 ),
            new BaseCombatStatInfo(     89,    158,    143,    167,    185 ),
            new BaseCombatStatInfo(     89,    160,    145,    169,    188 ),
            new BaseCombatStatInfo(     91,    162,    146,    171,    189 ),
            new BaseCombatStatInfo(     96,    170,    154,    180,    199 ), // 70
            new BaseCombatStatInfo(     98,    175,    158,    185,    205 ),
            new BaseCombatStatInfo(    103,    184,    166,    194,    216 ),
            new BaseCombatStatInfo(    108,    193,    174,    203,    225 ),
            new BaseCombatStatInfo(    109,    194,    175,    205,    228 ),
            new BaseCombatStatInfo(    110,    196,    177,    207,    229 ), // 75
            new BaseCombatStatInfo(    111,    198,    179,    209,    232 ),
            new BaseCombatStatInfo(    112,    201,    181,    212,    235 ),
            new BaseCombatStatInfo(    113,    203,    183,    214,    238 ),
            new BaseCombatStatInfo(    115,    206,    186,    217,    241 ),
            new BaseCombatStatInfo(    117,    209,    189,    221,    245 ), // 80
            new BaseCombatStatInfo(    122,    218,    197,    230,    256 ),
            new BaseCombatStatInfo(    127,    226,    204,    239,    264 ),
            new BaseCombatStatInfo(    129,    231,    209,    244,    270 ),
            new BaseCombatStatInfo(    130,    233,    210,    246,    273 ),
            new BaseCombatStatInfo(    132,    235,    212,    248,    275 ), // 85
            new BaseCombatStatInfo(    136,    243,    220,    257,    285 ),
            new BaseCombatStatInfo(    141,    252,    227,    266,    295 ),
            new BaseCombatStatInfo(    146,    260,    235,    275,    304 ),
            new BaseCombatStatInfo(    150,    269,    243,    284,    315 ),
            new BaseCombatStatInfo(    155,    277,    250,    293,    325 ), // 90
            new BaseCombatStatInfo(    212,    380,    343,    401,    445 ),
            new BaseCombatStatInfo(    251,    449,    405,    474,    526 ),
            new BaseCombatStatInfo(    294,    525,    474,    555,    615 ),
            new BaseCombatStatInfo(    344,    615,    555,    650,    721 ),
            new BaseCombatStatInfo(    404,    722,    652,    763,    845 ), // 95
            new BaseCombatStatInfo(    475,    849,    767,    898,    996 ),
            new BaseCombatStatInfo(    494,    883,    797,    934,   1036 ),
            new BaseCombatStatInfo(    514,    918,    828,    970,   1075 ),
            new BaseCombatStatInfo(    532,    951,    859,   1006,   1115 ),
            new BaseCombatStatInfo(    551,    985,    890,   1042,   1155 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Warlock and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo WarlockClassStats(int Level)
        {
            return _warlockClassStats[Level - 1];
        }
        #endregion

        #region Monk
        private static readonly List<BaseCombatStatInfo> _monkClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(      7,     15,     11,     12,      9 ),
            new BaseCombatStatInfo(      8,     17,     12,     13,     10 ),
            new BaseCombatStatInfo(      9,     18,     12,     14,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ), // 5
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(     10,     20,     14,     16,     12 ),
            new BaseCombatStatInfo(     10,     21,     15,     17,     13 ),
            new BaseCombatStatInfo(     11,     23,     16,     18,     14 ),
            new BaseCombatStatInfo(     12,     24,     17,     19,     14 ), // 10
            new BaseCombatStatInfo(     13,     26,     18,     21,     16 ),
            new BaseCombatStatInfo(     14,     29,     20,     23,     17 ),
            new BaseCombatStatInfo(     15,     31,     22,     25,     19 ),
            new BaseCombatStatInfo(     16,     34,     24,     27,     20 ),
            new BaseCombatStatInfo(     18,     36,     25,     29,     22 ), // 15
            new BaseCombatStatInfo(     19,     39,     27,     31,     23 ),
            new BaseCombatStatInfo(     20,     41,     29,     33,     25 ),
            new BaseCombatStatInfo(     22,     45,     31,     36,     27 ),
            new BaseCombatStatInfo(     23,     47,     33,     38,     29 ),
            new BaseCombatStatInfo(     24,     50,     35,     40,     30 ), // 20
            new BaseCombatStatInfo(     25,     52,     36,     42,     32 ),
            new BaseCombatStatInfo(     27,     56,     39,     45,     34 ),
            new BaseCombatStatInfo(     28,     58,     41,     47,     35 ),
            new BaseCombatStatInfo(     30,     62,     43,     50,     38 ),
            new BaseCombatStatInfo(     31,     65,     45,     52,     39 ), // 25
            new BaseCombatStatInfo(     33,     67,     47,     54,     41 ),
            new BaseCombatStatInfo(     34,     69,     48,     56,     42 ),
            new BaseCombatStatInfo(     36,     73,     51,     59,     44 ),
            new BaseCombatStatInfo(     37,     76,     53,     61,     46 ),
            new BaseCombatStatInfo(     38,     78,     54,     63,     47 ), // 30
            new BaseCombatStatInfo(     39,     81,     56,     65,     49 ),
            new BaseCombatStatInfo(     40,     83,     58,     67,     50 ),
            new BaseCombatStatInfo(     42,     86,     59,     69,     52 ),
            new BaseCombatStatInfo(     44,     90,     63,     73,     55 ),
            new BaseCombatStatInfo(     45,     93,     64,     75,     56 ), // 35
            new BaseCombatStatInfo(     46,     95,     66,     77,     58 ),
            new BaseCombatStatInfo(     48,     98,     68,     79,     59 ),
            new BaseCombatStatInfo(     49,    100,     70,     81,     61 ),
            new BaseCombatStatInfo(     50,    103,     71,     83,     62 ),
            new BaseCombatStatInfo(     52,    106,     74,     86,     65 ), // 40
            new BaseCombatStatInfo(     53,    109,     76,     88,     66 ),
            new BaseCombatStatInfo(     54,    111,     77,     90,     68 ),
            new BaseCombatStatInfo(     56,    114,     79,     92,     69 ),
            new BaseCombatStatInfo(     57,    116,     81,     94,     71 ),
            new BaseCombatStatInfo(     59,    120,     83,     97,     73 ), // 45
            new BaseCombatStatInfo(     60,    124,     86,    100,     75 ),
            new BaseCombatStatInfo(     62,    126,     88,    102,     77 ),
            new BaseCombatStatInfo(     63,    129,     89,    104,     78 ),
            new BaseCombatStatInfo(     64,    131,     91,    106,     80 ),
            new BaseCombatStatInfo(     65,    134,     93,    108,     81 ), // 50
            new BaseCombatStatInfo(     66,    136,     94,    110,     83 ),
            new BaseCombatStatInfo(     68,    140,     97,    113,     85 ),
            new BaseCombatStatInfo(     69,    142,     99,    115,     86 ),
            new BaseCombatStatInfo(     71,    145,    100,    117,     88 ),
            new BaseCombatStatInfo(     72,    147,    102,    119,     89 ), // 55
            new BaseCombatStatInfo(     74,    151,    105,    122,     92 ),
            new BaseCombatStatInfo(     75,    153,    106,    124,     93 ),
            new BaseCombatStatInfo(     76,    156,    108,    126,     95 ),
            new BaseCombatStatInfo(     77,    158,    110,    128,     96 ),
            new BaseCombatStatInfo(     79,    162,    112,    131,     98 ), // 60
            new BaseCombatStatInfo(     84,    173,    120,    140,    105 ),
            new BaseCombatStatInfo(     90,    184,    128,    149,    112 ),
            new BaseCombatStatInfo(     95,    195,    135,    158,    119 ),
            new BaseCombatStatInfo(     96,    198,    137,    160,    120 ),
            new BaseCombatStatInfo(     98,    201,    140,    163,    122 ), // 65
            new BaseCombatStatInfo(     99,    204,    141,    165,    124 ),
            new BaseCombatStatInfo(    101,    206,    143,    167,    125 ),
            new BaseCombatStatInfo(    102,    209,    145,    169,    127 ),
            new BaseCombatStatInfo(    103,    211,    146,    171,    128 ),
            new BaseCombatStatInfo(    108,    222,    154,    180,    135 ), // 70
            new BaseCombatStatInfo(    111,    228,    158,    185,    139 ),
            new BaseCombatStatInfo(    117,    240,    166,    194,    146 ),
            new BaseCombatStatInfo(    122,    251,    174,    203,    152 ),
            new BaseCombatStatInfo(    124,    253,    175,    205,    154 ),
            new BaseCombatStatInfo(    124,    256,    177,    207,    155 ), // 75
            new BaseCombatStatInfo(    126,    258,    179,    209,    157 ),
            new BaseCombatStatInfo(    127,    262,    181,    212,    159 ),
            new BaseCombatStatInfo(    129,    264,    183,    214,    161 ),
            new BaseCombatStatInfo(    130,    268,    186,    217,    163 ),
            new BaseCombatStatInfo(    133,    273,    189,    221,    166 ), // 80
            new BaseCombatStatInfo(    139,    284,    197,    230,    173 ),
            new BaseCombatStatInfo(    144,    295,    204,    239,    179 ),
            new BaseCombatStatInfo(    147,    301,    209,    244,    183 ),
            new BaseCombatStatInfo(    148,    304,    210,    246,    185 ),
            new BaseCombatStatInfo(    149,    306,    212,    248,    186 ), // 85
            new BaseCombatStatInfo(    154,    317,    220,    257,    193 ),
            new BaseCombatStatInfo(    160,    328,    227,    266,    200 ),
            new BaseCombatStatInfo(    165,    339,    235,    275,    206 ),
            new BaseCombatStatInfo(    171,    350,    243,    284,    213 ),
            new BaseCombatStatInfo(    176,    361,    250,    293,    220 ), // 90
            new BaseCombatStatInfo(    241,    495,    343,    401,    301 ),
            new BaseCombatStatInfo(    285,    585,    405,    474,    356 ),
            new BaseCombatStatInfo(    333,    684,    474,    555,    416 ),
            new BaseCombatStatInfo(    391,    801,    555,    650,    488 ),
            new BaseCombatStatInfo(    459,    941,    652,    763,    572 ), // 95
            new BaseCombatStatInfo(    540,   1107,    767,    898,    674 ),
            new BaseCombatStatInfo(    561,   1151,    797,    934,    701 ),
            new BaseCombatStatInfo(    583,   1196,    828,    970,    728 ),
            new BaseCombatStatInfo(    605,   1240,    859,   1006,    755 ),
            new BaseCombatStatInfo(    626,   1284,    890,   1042,    782 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Monk and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo MonkClassStats(int Level)
        {
            return _monkClassStats[Level - 1];
        }
        #endregion

        #region Druid
        private static readonly List<BaseCombatStatInfo> _druidClassStats = new List<BaseCombatStatInfo>()
        {
            new BaseCombatStatInfo(      7,     15,     11,     12,      9 ),
            new BaseCombatStatInfo(      8,     17,     12,     13,     10 ),
            new BaseCombatStatInfo(      9,     18,     12,     14,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ), // 5
            new BaseCombatStatInfo(      9,     19,     13,     15,     11 ),
            new BaseCombatStatInfo(     10,     20,     14,     16,     12 ),
            new BaseCombatStatInfo(     10,     21,     15,     17,     13 ),
            new BaseCombatStatInfo(     11,     23,     16,     18,     14 ),
            new BaseCombatStatInfo(     12,     24,     17,     19,     14 ), // 10
            new BaseCombatStatInfo(     13,     26,     18,     21,     16 ),
            new BaseCombatStatInfo(     14,     29,     20,     23,     17 ),
            new BaseCombatStatInfo(     15,     31,     22,     25,     19 ),
            new BaseCombatStatInfo(     16,     34,     24,     27,     20 ),
            new BaseCombatStatInfo(     18,     36,     25,     29,     22 ), // 15
            new BaseCombatStatInfo(     19,     39,     27,     31,     23 ),
            new BaseCombatStatInfo(     20,     41,     29,     33,     25 ),
            new BaseCombatStatInfo(     22,     45,     31,     36,     27 ),
            new BaseCombatStatInfo(     23,     47,     33,     38,     29 ),
            new BaseCombatStatInfo(     24,     50,     35,     40,     30 ), // 20
            new BaseCombatStatInfo(     25,     52,     36,     42,     32 ),
            new BaseCombatStatInfo(     27,     56,     39,     45,     34 ),
            new BaseCombatStatInfo(     28,     58,     41,     47,     35 ),
            new BaseCombatStatInfo(     30,     62,     43,     50,     38 ),
            new BaseCombatStatInfo(     31,     65,     45,     52,     39 ), // 25
            new BaseCombatStatInfo(     33,     67,     47,     54,     41 ),
            new BaseCombatStatInfo(     34,     69,     48,     56,     42 ),
            new BaseCombatStatInfo(     36,     73,     51,     59,     44 ),
            new BaseCombatStatInfo(     37,     76,     53,     61,     46 ),
            new BaseCombatStatInfo(     38,     78,     54,     63,     47 ), // 30
            new BaseCombatStatInfo(     39,     81,     56,     65,     49 ),
            new BaseCombatStatInfo(     40,     83,     58,     67,     50 ),
            new BaseCombatStatInfo(     42,     86,     59,     69,     52 ),
            new BaseCombatStatInfo(     44,     90,     63,     73,     55 ),
            new BaseCombatStatInfo(     45,     93,     64,     75,     56 ), // 35
            new BaseCombatStatInfo(     46,     95,     66,     77,     58 ),
            new BaseCombatStatInfo(     48,     98,     68,     79,     59 ),
            new BaseCombatStatInfo(     49,    100,     70,     81,     61 ),
            new BaseCombatStatInfo(     50,    103,     71,     83,     62 ),
            new BaseCombatStatInfo(     52,    106,     74,     86,     65 ), // 40
            new BaseCombatStatInfo(     53,    109,     76,     88,     66 ),
            new BaseCombatStatInfo(     54,    111,     77,     90,     68 ),
            new BaseCombatStatInfo(     56,    114,     79,     92,     69 ),
            new BaseCombatStatInfo(     57,    116,     81,     94,     71 ),
            new BaseCombatStatInfo(     59,    120,     83,     97,     73 ), // 45
            new BaseCombatStatInfo(     60,    124,     86,    100,     75 ),
            new BaseCombatStatInfo(     62,    126,     88,    102,     77 ),
            new BaseCombatStatInfo(     63,    129,     89,    104,     78 ),
            new BaseCombatStatInfo(     64,    131,     91,    106,     80 ),
            new BaseCombatStatInfo(     65,    134,     93,    108,     81 ), // 50
            new BaseCombatStatInfo(     66,    136,     94,    110,     83 ),
            new BaseCombatStatInfo(     68,    140,     97,    113,     85 ),
            new BaseCombatStatInfo(     69,    142,     99,    115,     86 ),
            new BaseCombatStatInfo(     71,    145,    100,    117,     88 ),
            new BaseCombatStatInfo(     72,    147,    102,    119,     89 ), // 55
            new BaseCombatStatInfo(     74,    151,    105,    122,     92 ),
            new BaseCombatStatInfo(     75,    153,    106,    124,     93 ),
            new BaseCombatStatInfo(     76,    156,    108,    126,     95 ),
            new BaseCombatStatInfo(     77,    158,    110,    128,     96 ),
            new BaseCombatStatInfo(     79,    162,    112,    131,     98 ), // 60
            new BaseCombatStatInfo(     84,    173,    120,    140,    105 ),
            new BaseCombatStatInfo(     90,    184,    128,    149,    112 ),
            new BaseCombatStatInfo(     95,    195,    135,    158,    119 ),
            new BaseCombatStatInfo(     96,    198,    137,    160,    120 ),
            new BaseCombatStatInfo(     98,    201,    140,    163,    122 ), // 65
            new BaseCombatStatInfo(     99,    204,    141,    165,    124 ),
            new BaseCombatStatInfo(    101,    206,    143,    167,    125 ),
            new BaseCombatStatInfo(    102,    209,    145,    169,    127 ),
            new BaseCombatStatInfo(    103,    211,    146,    171,    128 ),
            new BaseCombatStatInfo(    108,    222,    154,    180,    135 ), // 70
            new BaseCombatStatInfo(    111,    228,    158,    185,    139 ),
            new BaseCombatStatInfo(    117,    240,    166,    194,    146 ),
            new BaseCombatStatInfo(    122,    251,    174,    203,    152 ),
            new BaseCombatStatInfo(    124,    253,    175,    205,    154 ),
            new BaseCombatStatInfo(    124,    256,    177,    207,    155 ), // 75
            new BaseCombatStatInfo(    126,    258,    179,    209,    157 ),
            new BaseCombatStatInfo(    127,    262,    181,    212,    159 ),
            new BaseCombatStatInfo(    129,    264,    183,    214,    161 ),
            new BaseCombatStatInfo(    130,    268,    186,    217,    163 ),
            new BaseCombatStatInfo(    133,    273,    189,    221,    166 ), // 80
            new BaseCombatStatInfo(    139,    284,    197,    230,    173 ),
            new BaseCombatStatInfo(    144,    295,    204,    239,    179 ),
            new BaseCombatStatInfo(    147,    301,    209,    244,    183 ),
            new BaseCombatStatInfo(    148,    304,    210,    246,    185 ),
            new BaseCombatStatInfo(    149,    306,    212,    248,    186 ), // 85
            new BaseCombatStatInfo(    154,    317,    220,    257,    193 ),
            new BaseCombatStatInfo(    160,    328,    227,    266,    200 ),
            new BaseCombatStatInfo(    165,    339,    235,    275,    206 ),
            new BaseCombatStatInfo(    171,    350,    243,    284,    213 ),
            new BaseCombatStatInfo(    176,    361,    250,    293,    220 ), // 90
            new BaseCombatStatInfo(    241,    495,    343,    401,    301 ),
            new BaseCombatStatInfo(    285,    585,    405,    474,    356 ),
            new BaseCombatStatInfo(    333,    684,    474,    555,    416 ),
            new BaseCombatStatInfo(    391,    801,    555,    650,    488 ),
            new BaseCombatStatInfo(    459,    941,    652,    763,    572 ), // 95
            new BaseCombatStatInfo(    540,   1107,    767,    898,    674 ),
            new BaseCombatStatInfo(    561,   1151,    797,    934,    701 ),
            new BaseCombatStatInfo(    583,   1196,    828,    970,    728 ),
            new BaseCombatStatInfo(    605,   1240,    859,   1006,    755 ),
            new BaseCombatStatInfo(    626,   1284,    890,   1042,    782 ), // 100
        };
        /// <summary>
        /// Takes in the level of the Druid and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo DruidClassStats(int Level)
        {
            return _druidClassStats[Level - 1];
        }
        #endregion
        #endregion

        #region Race Stats
        private static readonly List<BaseCombatStatInfo> _raceStats = new List<BaseCombatStatInfo>()
        {
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // No Race
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Human
              new BaseCombatStatInfo(   3, -3,  1, -3,  2 ), // Orc
              new BaseCombatStatInfo(   5, -4,  1, -1, -1 ), // Dwarf
              new BaseCombatStatInfo(  -4,  4,  0,  0,  0 ), // Night Elf
              new BaseCombatStatInfo(  -1, -2,  0, -2,  5 ), // Undead
              new BaseCombatStatInfo(   5, -4,  1, -4,  2 ), // Tauren
              new BaseCombatStatInfo(  -5,  2,  0,  3,  0 ), // Gnome
              new BaseCombatStatInfo(   1,  2,  0, -4,  1 ), // Troll
              new BaseCombatStatInfo(  -3,  2,  0,  3, -2 ), // Goblin
              new BaseCombatStatInfo(  -3,  2,  0,  3, -2 ), // Blood Elf
              new BaseCombatStatInfo(   1, -3,  0,  0,  2 ), // Draenei
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Fel Orc
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Naga
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Broken
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Skeleton
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Vrykul
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Tuskarr
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Forest Troll
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Tanuka
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Skeleton
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Ice Troll
              new BaseCombatStatInfo(   3,  2,  0, -4, -1 ), // Worgen
              new BaseCombatStatInfo(   0,  0,  0,  0,  0 ), // Gilnean
              new BaseCombatStatInfo(   0, -2,  1, -1,  2 ), // Pandaren
              new BaseCombatStatInfo(   0, -2,  1, -1,  2 ), // Pandaren - Alliance
              new BaseCombatStatInfo(   0, -2,  1, -1,  2 ), // Pandaren - Horde
        };
        /// <summary>
        /// Takes in the level of the Warrior and returns the stats for the given level
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static BaseCombatStatInfo RaceStats(CharacterRace race)
        {
            int raceID = 0;
            switch (race)
            {
                case CharacterRace.Human:               raceID = 1; break;
                case CharacterRace.Orc:                 raceID = 2; break;
                case CharacterRace.Dwarf:               raceID = 3; break;
                case CharacterRace.NightElf:            raceID = 4; break;
                case CharacterRace.Undead:              raceID = 5; break;
                case CharacterRace.Tauren:              raceID = 6; break;
                case CharacterRace.Gnome:               raceID = 7; break;
                case CharacterRace.Troll:               raceID = 8; break;
                case CharacterRace.Goblin:              raceID = 9; break;
                case CharacterRace.BloodElf:            raceID = 10; break;
                case CharacterRace.Draenei:             raceID = 11; break;
                case CharacterRace.Worgen:              raceID = 22; break;
                case CharacterRace.PandarenAlliance:    raceID = 25; break;
                case CharacterRace.PandarenHorde:       raceID = 26; break;
                default: raceID = 0; break;
            }
            return _raceStats[raceID];
        }

        public static BaseCombatStatInfo TotalBaseStats(CharacterRace race, CharacterClass charClass, int level)
        {
            BaseCombatStatInfo stat = new BaseCombatStatInfo(0, 0, 0, 0, 0);
            stat.Accumulate(RaceStats(race));
            switch (charClass)
            {
                case CharacterClass.Warrior: stat.Accumulate(WarriorClassStats(level)); break;
                case CharacterClass.Paladin: stat.Accumulate(PaladinClassStats(level)); break;
                case CharacterClass.Hunter: stat.Accumulate(HunterClassStats(level)); break;
                case CharacterClass.Rogue: stat.Accumulate(RogueClassStats(level)); break;
                case CharacterClass.Priest: stat.Accumulate(PriestClassStats(level)); break;
                case CharacterClass.DeathKnight: stat.Accumulate(DeathKnightClassStats(level)); break;
                case CharacterClass.Shaman: stat.Accumulate(ShamanClassStats(level)); break;
                case CharacterClass.Mage: stat.Accumulate(MageClassStats(level)); break;
                case CharacterClass.Warlock: stat.Accumulate(WarlockClassStats(level)); break;
                case CharacterClass.Monk: stat.Accumulate(MonkClassStats(level)); break;
                case CharacterClass.Druid: stat.Accumulate(DruidClassStats(level)); break;
            }
            return stat;
        }
        #endregion

        #region Touch of the Grave Scaling
        private static readonly List<float> _touchOfTheGraveScaling = new List<float>()
        {
              3,    3,    4,    4,    5,
              5,    6,    7,    7,    8,
              8,    9,    9,   10,   11,
             11,   12,   12,   13,   14,
             15,   15,   15,   16,   17,
             17,   18,   18,   19,   20,
             20,   21,   21,   22,   23,
             23,   24,   24,   25,   26,
             26,   27,   27,   28,   28,
             29,   30,   30,   31,   31,
             32,   33,   33,   34,   34,
             35,   36,   46,   47,   49,
             51,   53,   54,   55,   57,
             58,   59,   84,   87,   90,
             93,   97,  101,  104,  108,
            113,  117,  121,  126,  131,
            308,  368,  435,  473,  509,
            819,  987, 1189, 1433, 1710,
        };
        /// <summary>
        /// Takes in the level of the Undead and returns the Touch of the Grave Scaling
        /// </summary>
        /// <param name="Level"></param>
        /// <returns></returns>
        public static float TouchOfTheGraveScaling(int Level)
        {
            return _touchOfTheGraveScaling[Level - 1];
        }

        public static float TouchOfTheGraveMultiplier = 8.0000000000f;
        public static float TouchOfTheGraveDelta = 0.1500000060f;
        #endregion
    }

    public class BaseCombatStatInfo
    {
        public int Strength = 0;
        public int Agility = 0;
        public int Stamina = 0;
        public int Intellect = 0;
        public int Spirit = 0;

        public BaseCombatStatInfo(int strength, int agility, int stamina, int intellect, int spirit)
        {
            Strength = strength;
            Agility = agility;
            Stamina = stamina;
            Intellect = intellect;
            Spirit = spirit;
        }

        public void Accumulate(BaseCombatStatInfo stat)
        {
            Strength += stat.Strength;
            Agility += stat.Agility;
            Stamina += stat.Stamina;
            Intellect += stat.Intellect;
            Spirit += stat.Spirit;
        }
    }
}